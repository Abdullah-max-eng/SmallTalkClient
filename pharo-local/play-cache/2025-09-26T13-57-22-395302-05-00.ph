"=== Part 1: Smalltalk Spec2 client that just prints the SQL to Transcript ==="| cls useSlots |PackageOrganizer default ensurePackage: 'GraphDBClient'."Create the presenter class (handles both slot/ivar APIs)"useSlots := (SpPresenter class canUnderstand: #subclass:slots:classVariables:package:).(Smalltalk includesKey: #SQLClientApp) ifFalse: [    useSlots        ifTrue: [            SpPresenter                subclass: #SQLClientApp                slots: { #sqlInput . #printBtn . #clearBtn }                classVariables: { }                package: 'GraphDBClient' ]        ifFalse: [            SpPresenter                subclass: #SQLClientApp                instanceVariableNames: 'sqlInput printBtn clearBtn'                classVariableNames: ''                package: 'GraphDBClient' ] ].cls := Smalltalk at: #SQLClientApp."Build widgets"cls compile: 'initializePresenters    sqlInput := SpTextPresenter new.    (sqlInput respondsTo: #acceptOnCR:) ifTrue: [ sqlInput acceptOnCR: false ].    printBtn := SpButtonPresenter new        label: ''Print to Transcript'';        action: [ self printQuery ].    clearBtn := SpButtonPresenter new        label: ''Clear'';        action: [ sqlInput text: '''' ].' classified: 'ui'."Layout (no scroll wrappers, just core Spec2)"cls compile: 'defaultLayout    ^ SpBoxLayout newTopToBottom        spacing: 8;        add: (SpLabelPresenter new label: ''SQL Input'');        add: sqlInput;        add: (SpBoxLayout newLeftToRight                spacing: 8;                add: printBtn;                add: clearBtn;                yourself);        yourself.' classified: 'ui'."Action"cls compile: 'printQuery    | q |    q := (sqlInput text ifNil: ['''']) withSeparatorsCompacted.    q isEmpty ifTrue: [ ^ self inform: ''Please enter an SQL query.'' ].    Transcript        cr; show: ''--- Client sent SQL ---''; cr;        show: q; cr;        show: ''-----------------------''; cr.    self inform: ''Printed to Transcript.''.' classified: 'actions'."Open helper"cls class compile: 'open    | app |    app := self new.    (app respondsTo: #openWithSpec)        ifTrue: [ app openWithSpec ]        ifFalse: [ app open ].    ^ app.' classified: 'open'.
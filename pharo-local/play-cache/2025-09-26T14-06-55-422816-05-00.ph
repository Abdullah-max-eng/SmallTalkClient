"Part 1 â€” SELECT-only validator (build + send JSON payload)"| sql body valid endsWithSemi rest lc fromPos afterFrom jsonEscaped payload   serverUrl client resp status respBody |"1) Ask user for SQL"sql := UIManager default request: 'Type SQL (blank = quit)'.(sql isNil or: [ (sql withSeparatorsCompacted) isEmpty ]) ifTrue: [ ^ self ]."2) Normalize"sql := sql withSeparatorsCompacted trimBoth.endsWithSemi := (sql notEmpty and: [ sql last = $. ]).body := (endsWithSemi ifTrue: [ sql allButLast ] ifFalse: [ sql ]) trimBoth.lc := body asLowercase."3) Manual SELECT-only validation (very loose)"valid := (lc beginsWith: 'select').valid ifTrue: [	rest := (body copyFrom: 7 to: body size) trimBoth.	fromPos := lc findString: ' from '.	fromPos > 0		ifTrue: [			afterFrom := (body copyFrom: (fromPos + 6) to: body size) trimBoth.			valid := afterFrom size > 0 ]		ifFalse: [			| allowedChars |			allowedChars := { $* . $, . $  . $( . $) . $. }.			valid := rest notEmpty				and: [ rest allSatisfy: [ :ch | ch isDigit or: [ allowedChars includes: ch ] ] ] ] ].valid ifFalse: [ ^ UIManager default inform: 'Invalid SQL (manual check).' ]."4) Build JSON payload (escape double quotes in SQL)"jsonEscaped := body copyReplaceAll: '"' with: '\"'.payload := String streamContents: [ :s |	s		nextPutAll: '{"sql":"';		nextPutAll: jsonEscaped;		nextPutAll: '"}' ]."5) Print payload locally (debug)"Transcript	cr; show: '--- JSON payload ---'; cr;	show: payload; cr;	show: '----------------------'; cr."6) Send payload via RESTful HTTP POST (Zinc)"serverUrl := 'http://httpbin.org/post'.[    [        client := ZnClient new.		  client         url: serverUrl;         timeout: 40;         accept: ZnMimeType applicationJson;         contents: payload;         contentType: ZnMimeType applicationJson;  "Set content type AFTER contents"         post.                resp := client response.        status := resp code.        respBody := resp hasEntity             ifTrue: [ resp contents ]             ifFalse: [ '' ].    ] on: ZnHttpUnsuccessful       do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]] on: NetworkErrordo: [ :ex | UIManager default alert: 'Network error: ', ex messageText ]
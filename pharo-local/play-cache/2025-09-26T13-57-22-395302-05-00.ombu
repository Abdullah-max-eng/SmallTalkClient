OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-26T13:57:50.325947-05:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '"Should print true in the inspector if Spec2 is present"\r{ #SpPresenter. #SpWindowPresenter. #SpTextPresenter. #SpButtonPresenter. #SpBoxLayout } \r    allSatisfy: [ :sym | (Smalltalk at: sym ifAbsent: [ nil ]) notNil ].\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-26T14:00:13.421285-05:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '"=== Part 1: Smalltalk Spec2 client that just prints the SQL to Transcript ==="\r| cls useSlots |\rPackageOrganizer default ensurePackage: \'GraphDBClient\'.\r\r"Create the presenter class (handles both slot/ivar APIs)"\ruseSlots := (SpPresenter class canUnderstand: #subclass:slots:classVariables:package:).\r(Smalltalk includesKey: #SQLClientApp) ifFalse: [\r    useSlots\r        ifTrue: [\r            SpPresenter\r                subclass: #SQLClientApp\r                slots: { #sqlInput . #printBtn . #clearBtn }\r                classVariables: { }\r                package: \'GraphDBClient\' ]\r        ifFalse: [\r            SpPresenter\r                subclass: #SQLClientApp\r                instanceVariableNames: \'sqlInput printBtn clearBtn\'\r                classVariableNames: \'\'\r                package: \'GraphDBClient\' ] ].\r\rcls := Smalltalk at: #SQLClientApp.\r\r"Build widgets"\rcls compile: \'\rinitializePresenters\r    sqlInput := SpTextPresenter new.\r    (sqlInput respondsTo: #acceptOnCR:) ifTrue: [ sqlInput acceptOnCR: false ].\r\r    printBtn := SpButtonPresenter new\r        label: \'\'Print to Transcript\'\';\r        action: [ self printQuery ].\r\r    clearBtn := SpButtonPresenter new\r        label: \'\'Clear\'\';\r        action: [ sqlInput text: \'\'\'\' ].\r\' classified: \'ui\'.\r\r"Layout (no scroll wrappers, just core Spec2)"\rcls compile: \'\rdefaultLayout\r    ^ SpBoxLayout newTopToBottom\r        spacing: 8;\r        add: (SpLabelPresenter new label: \'\'SQL Input\'\');\r        add: sqlInput;\r        add: (SpBoxLayout newLeftToRight\r                spacing: 8;\r                add: printBtn;\r                add: clearBtn;\r                yourself);\r        yourself.\r\' classified: \'ui\'.\r\r"Action"\rcls compile: \'\rprintQuery\r    | q |\r    q := (sqlInput\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-26T14:00:40.852721-05:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '"=== Part 1: Smalltalk Spec2 client that just prints the SQL to Transcript ==="\r| cls useSlots |\rPackageOrganizer default ensurePackage: \'GraphDBClient\'.\r\r"Create the presenter class (handles both slot/ivar APIs)"\ruseSlots := (SpPresenter class canUnderstand: #subclass:slots:classVariables:package:).\r(Smalltalk includesKey: #SQLClientApp) ifFalse: [\r    useSlots\r        ifTrue: [\r            SpPresenter\r                subclass: #SQLClientApp\r                slots: { #sqlInput . #printBtn . #clearBtn }\r                classVariables: { }\r                package: \'GraphDBClient\' ]\r        ifFalse: [\r            SpPresenter\r                subclass: #SQLClientApp\r                instanceVariableNames: \'sqlInput printBtn clearBtn\'\r                classVariableNames: \'\'\r                package: \'GraphDBClient\' ] ].\r\rcls := Smalltalk at: #SQLClientApp.\r\r"Build widgets"\rcls compile: \'\rinitializePresenters\r    sqlInput := SpTextPresenter new.\r    (sqlInput respondsTo: #acceptOnCR:) ifTrue: [ sqlInput acceptOnCR: false ].\r\r    printBtn := SpButtonPresenter new\r        label: \'\'Print to Transcript\'\';\r        action: [ self printQuery ].\r\r    clearBtn := SpButtonPresenter new\r        label: \'\'Clear\'\';\r        action: [ sqlInput text: \'\'\'\' ].\r\' classified: \'ui\'.\r\r"Layout (no scroll wrappers, just core Spec2)"\rcls compile: \'\rdefaultLayout\r    ^ SpBoxLayout newTopToBottom\r        spacing: 8;\r        add: (SpLabelPresenter new label: \'\'SQL Input\'\');\r        add: sqlInput;\r        add: (SpBoxLayout newLeftToRight\r                spacing: 8;\r                add: printBtn;\r                add: clearBtn;\r                yourself);\r        yourself.\r\' classified: \'ui\'.\r\r"Action"\rcls compile: \'\rprintQuery\r    | q |\r    q := (sqlInput\r\r\r\rSQLClientApp open.'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-26T14:02:01.811249-05:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '"=== Part 1: Smalltalk Spec2 client that just prints the SQL to Transcript ==="\r| cls useSlots |\rPackageOrganizer default ensurePackage: \'GraphDBClient\'.\r\r"Create the presenter class (handles both slot/ivar APIs)"\ruseSlots := (SpPresenter class canUnderstand: #subclass:slots:classVariables:package:).\r(Smalltalk includesKey: #SQLClientApp) ifFalse: [\r    useSlots\r        ifTrue: [\r            SpPresenter\r                subclass: #SQLClientApp\r                slots: { #sqlInput . #printBtn . #clearBtn }\r                classVariables: { }\r                package: \'GraphDBClient\' ]\r        ifFalse: [\r            SpPresenter\r                subclass: #SQLClientApp\r                instanceVariableNames: \'sqlInput printBtn clearBtn\'\r                classVariableNames: \'\'\r                package: \'GraphDBClient\' ] ].\r\rcls := Smalltalk at: #SQLClientApp.\r\r"Build widgets"\rcls compile: \'\rinitializePresenters\r    sqlInput := SpTextPresenter new.\r    (sqlInput respondsTo: #acceptOnCR:) ifTrue: [ sqlInput acceptOnCR: false ].\r\r    printBtn := SpButtonPresenter new\r        label: \'\'Print to Transcript\'\';\r        action: [ self printQuery ].\r\r    clearBtn := SpButtonPresenter new\r        label: \'\'Clear\'\';\r        action: [ sqlInput text: \'\'\'\' ].\r\' classified: \'ui\'.\r\r"Layout (no scroll wrappers, just core Spec2)"\rcls compile: \'\rdefaultLayout\r    ^ SpBoxLayout newTopToBottom\r        spacing: 8;\r        add: (SpLabelPresenter new label: \'\'SQL Input\'\');\r        add: sqlInput;\r        add: (SpBoxLayout newLeftToRight\r                spacing: 8;\r                add: printBtn;\r                add: clearBtn;\r                yourself);\r        yourself.\r\' classified: \'ui\'.\r\r"Action"\rcls compile: \'\rprintQuery\r    | q |\r    q := (sqlInput text ifNil: [\'\'\'\']) withSeparatorsCompacted.\r    q isEmpty ifTrue: [ ^ self inform: \'\'Please enter an SQL query.\'\' ].\r    Transcript\r        cr; show: \'\'--- Client sent SQL ---\'\'; cr;\r        show: q; cr;\r        show: \'\'-----------------------\'\'; cr.\r    self inform: \'\'Printed to Transcript.\'\'.\r\' classified: \'actions\'.\r\r"Open helper"\rcls class compile: \'\ropen\r    | app |\r    app := self new.\r    (app respondsTo: #openWithSpec)\r        ifTrue: [ app openWithSpec ]\r        ifFalse: [ app open ].\r    ^ app.\r\' classified: \'open\'.\r'
}
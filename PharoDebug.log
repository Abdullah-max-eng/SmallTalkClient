THERE_BE_DRAGONS_HERE
Attempt to read undeclared variable SQLClientApp
26 September 2025 2:00:49.719152 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndeclaredVariable>>runtimeUndeclaredReadInContext:
	Receiver: #SQLClientApp->nil
	Arguments and temporary variables: 
		aContext: 	UndefinedObject>>DoIt
	Receiver's instance variables: 
		name: 	#SQLClientApp
		value: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	SQLClientApp open
		source: 	'SQLClientApp open.'
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'SQLClientApp open.'
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#sym->nil )
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1748 to: 1765) ]
		text: 	an ObservableValueHolder[ '"=== Part 1: Smalltalk Spec2 client that j[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#sym->nil )
		aString: 	'SQLClientApp open.'
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1748 to: 1765) ]
		text: 	an ObservableValueHolder[ '"=== Part 1: Smalltalk Spec2 client that j[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
		aString: 	'SQLClientApp open.'
		aBlock: 	[ :result | ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
		aBlock: 	[ :result | ]
		selection: 	'SQLClientApp open.'
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCodeDoItCommand>>execute
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodeDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDoIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it)


[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	7


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		handler: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [ activeProcess
			psValueAt: index
			put:[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	7


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	72358930
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	7


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		handler: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [ activeProcess
			psValueAt: index
			put:[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	7


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	72358930
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ aCommand execute ] in SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillItem:with:
	Receiver: a SpActionMenuPresenterBuilder
	Arguments and temporary variables: 
		aMenuItem: 	a SpMenuItemPresenter
		aCommand: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ aCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillIte[..]
		compiledBlock: 	a CompiledBlock: [ aCommand execute ]
		numArgs: 	0
		receiver: 	a SpActionMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		aMenuItem: 	a SpMorphicMenuItemAdapter
		en: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Unnamed Window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Do it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection.' ]
		action: 	[ aCommand execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arguments: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(918028800)'Do it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(918028800)'Do it'
	Arguments and temporary variables: 
		evt: 	[(279@443) mouseUp 233300 nil]
		w: 	a WorldMorph(883747328) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(255.0@437.0) corner: (377.0@454.0)
		owner: 	a MenuMorph(724707072)
		submorphs: 	#()
		fullBounds: 	(255.0@437.0) corner: (377.0@454.0)
		color: 	Color white
		extension: 	a MorphExtension (6625024) [balloonText]  [other:  (presenter ->[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount :=[..]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		handler: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: [ | selArgCount |  "show cursor in case ite[..]
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(918028800)'Do it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |  "show cursor in case item opens a new MVC window[..]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(918028800)'Do it'
	Arguments and temporary variables: 
		evt: 	[(279@443) mouseUp 233300 nil]
		w: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(255.0@437.0) corner: (377.0@454.0)
		owner: 	a MenuMorph(724707072)
		submorphs: 	#()
		fullBounds: 	(255.0@437.0) corner: (377.0@454.0)
		color: 	Color white
		extension: 	a MorphExtension (6625024) [balloonText]  [other:  (presenter ->[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(918028800)'Do it'
	Arguments and temporary variables: 
		evt: 	[(279@443) mouseUp 233300 nil]
	Receiver's instance variables: 
		bounds: 	(255.0@437.0) corner: (377.0@454.0)
		owner: 	a MenuMorph(724707072)
		submorphs: 	#()
		fullBounds: 	(255.0@437.0) corner: (377.0@454.0)
		color: 	Color white
		extension: 	a MorphExtension (6625024) [balloonText]  [other:  (presenter ->[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(918028800)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(279@443) mouseUp 233300 nil]
	Receiver's instance variables: 
		bounds: 	(255.0@437.0) corner: (377.0@454.0)
		owner: 	a MenuMorph(724707072)
		submorphs: 	#()
		fullBounds: 	(255.0@437.0) corner: (377.0@454.0)
		color: 	Color white
		extension: 	a MorphExtension (6625024) [balloonText]  [other:  (presenter ->[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(279@443) mouseUp 233300 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToggleMenuItemMorph(918028800)'Do it'
	Receiver's instance variables: 
		timeStamp: 	233300
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(279@443)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(918028800)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(279@443) mouseUp 233300 nil]
	Receiver's instance variables: 
		bounds: 	(255.0@437.0) corner: (377.0@454.0)
		owner: 	a MenuMorph(724707072)
		submorphs: 	#()
		fullBounds: 	(255.0@437.0) corner: (377.0@454.0)
		color: 	Color white
		extension: 	a MorphExtension (6625024) [balloonText]  [other:  (presenter ->[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(279@443) mouseUp 233300 nil]
		aMorph: 	a SpToggleMenuItemMorph(918028800)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(279@443) mouseUp 233300 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(279@443) mouseUp 233300 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	233300
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(279@443)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(279@443) mouseUp 233300 nil]
		aMorph: 	a SpToggleMenuItemMorph(918028800)'Do it'
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
UndeclaredVariable>>runtimeUndeclaredReadInContext:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodeDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ aCommand execute ] in SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpPresenter class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:02:01.831736 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		useSlots: 	false
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| cls "=== Part 1: Smalltalk Spec2 client that just prints the [..]
		source: 	'"=== Part 1: Smalltalk Spec2 client that just prints the SQL to Tr[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"=== Part 1: Smalltalk Spec2 client that just prints the SQL to T[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#sym->nil )
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2277) ]
		text: 	an ObservableValueHolder[ '"=== Part 1: Smalltalk Spec2 client that j[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#sym->nil )
		aString: 	'"=== Part 1: Smalltalk Spec2 client that just prints the SQL to T[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2277) ]
		text: 	an ObservableValueHolder[ '"=== Part 1: Smalltalk Spec2 client that j[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(153195264))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(153195264)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(153195264)
	Arguments and temporary variables: 
		event: 	[(21.0@17.0) mouseUp 307244 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(18034176)
		submorphs: 	an Array(an AlignmentMorph(480691712))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (822522624) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(915773184)'Do it all'
		iconMorph: 	an ImageMorph(565533440)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(153195264)
	Arguments and temporary variables: 
		evt: 	[(21.0@17.0) mouseUp 307244 nil]
		all: 	an Array(a SpToolbarButtonMorph(153195264) a SpToolbarButtonMorph(7928[..]
		m: 	a SpToolbarButtonMorph(153195264)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(18034176)
		submorphs: 	an Array(an AlignmentMorph(480691712))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (822522624) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(915773184)'Do it all'
		iconMorph: 	an ImageMorph(565533440)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(153195264) a SpToolbarButtonMorph(792897280) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(153195264) a SpToolbarButtonMorph(792897280) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(153195264)
	Arguments and temporary variables: 
		evt: 	[(21.0@17.0) mouseUp 307244 nil]
		all: 	an Array(a SpToolbarButtonMorph(153195264) a SpToolbarButtonMorph(7928[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(18034176)
		submorphs: 	an Array(an AlignmentMorph(480691712))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (822522624) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(915773184)'Do it all'
		iconMorph: 	an ImageMorph(565533440)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(153195264)
	Arguments and temporary variables: 
		anEvent: 	[(21.0@17.0) mouseUp 307244 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(18034176)
		submorphs: 	an Array(an AlignmentMorph(480691712))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (822522624) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(915773184)'Do it all'
		iconMorph: 	an ImageMorph(565533440)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21.0@17.0) mouseUp 307244 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(153195264)
	Receiver's instance variables: 
		timeStamp: 	307244
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21.0@17.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(153195264)
	Arguments and temporary variables: 
		anEvent: 	[(21.0@17.0) mouseUp 307244 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(18034176)
		submorphs: 	an Array(an AlignmentMorph(480691712))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (822522624) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(915773184)'Do it all'
		iconMorph: 	an ImageMorph(565533440)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(153195264)
	Arguments and temporary variables: 
		anEvent: 	[(21.0@17.0) mouseUp 307244 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(18034176)
		submorphs: 	an Array(an AlignmentMorph(480691712))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (822522624) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(915773184)'Do it all'
		iconMorph: 	an ImageMorph(565533440)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(72@138) mouseUp 307244 nil]
		focusHolder: 	a SpToolbarButtonMorph(153195264)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(21.0@17.0) mouseUp 307244 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(72@138) corner: (88@154)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(72@138) corner: (88@154)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360121856)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@138) mouseUp 307244 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(72@138) mouseUp 307244 nil]
		focusHolder: 	a SpToolbarButtonMorph(153195264)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(21.0@17.0) mouseUp 307244 nil]
	Receiver's instance variables: 
		bounds: 	(72@138) corner: (88@154)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(72@138) corner: (88@154)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360121856)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@138) mouseUp 307244 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(72@138) mouseUp 307244 nil]
		focusHolder: 	a SpToolbarButtonMorph(153195264)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(72@138) corner: (88@154)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(72@138) corner: (88@154)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360121856)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@138) mouseUp 307244 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(72@138) mouseUp 307244 nil]
	Receiver's instance variables: 
		bounds: 	(72@138) corner: (88@154)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(72@138) corner: (88@154)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360121856)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@138) mouseUp 307244 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(72@138) mouseUp 307244 nil]
		evt: 	[(72@138) mouseUp 307244 nil]
	Receiver's instance variables: 
		bounds: 	(72@138) corner: (88@154)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(72@138) corner: (88@154)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360121856)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@138) mouseUp 307244 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(72@138) mouseUp 307244 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	233200
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(78012160)))
		lastAlarmTime: 	307224
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	233200
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(78012160)))
		lastAlarmTime: 	307224
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Attempt to read undeclared variable SQLClientApp
26 September 2025 2:03:06.915366 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndeclaredVariable>>runtimeUndeclaredReadInContext:
	Receiver: #SQLClientApp->nil
	Arguments and temporary variables: 
		aContext: 	UndefinedObject>>DoIt
	Receiver's instance variables: 
		name: 	#SQLClientApp
		value: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	SQLClientApp open
		source: 	'SQLClientApp open.'
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'SQLClientApp open.'
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary()
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 18) ]
		text: 	an ObservableValueHolder[ 'SQLClientApp open.' ]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary()
		aString: 	'SQLClientApp open.'
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 18) ]
		text: 	an ObservableValueHolder[ 'SQLClientApp open.' ]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(413387520))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(413387520)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		event: 	[(18.0@18.0) mouseUp 371104 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		evt: 	[(18.0@18.0) mouseUp 371104 nil]
		all: 	an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(9296[..]
		m: 	a SpToolbarButtonMorph(413387520)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(929611520) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(929611520) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		evt: 	[(18.0@18.0) mouseUp 371104 nil]
		all: 	an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(9296[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		anEvent: 	[(18.0@18.0) mouseUp 371104 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(18.0@18.0) mouseUp 371104 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(413387520)
	Receiver's instance variables: 
		timeStamp: 	371104
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(18.0@18.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		anEvent: 	[(18.0@18.0) mouseUp 371104 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		anEvent: 	[(18.0@18.0) mouseUp 371104 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(458@305) mouseUp 371104 nil]
		focusHolder: 	a SpToolbarButtonMorph(413387520)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(18.0@18.0) mouseUp 371104 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(506@319) corner: (522@335)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(506@319) corner: (522@335)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(506@319) mouseOver 372302 nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(458@305) mouseUp 371104 nil]
		focusHolder: 	a SpToolbarButtonMorph(413387520)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(18.0@18.0) mouseUp 371104 nil]
	Receiver's instance variables: 
		bounds: 	(506@319) corner: (522@335)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(506@319) corner: (522@335)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(506@319) mouseOver 372302 nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(458@305) mouseUp 371104 nil]
		focusHolder: 	a SpToolbarButtonMorph(413387520)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(506@319) corner: (522@335)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(506@319) corner: (522@335)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(506@319) mouseOver 372302 nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(458@305) mouseUp 371104 nil]
	Receiver's instance variables: 
		bounds: 	(506@319) corner: (522@335)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(506@319) corner: (522@335)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(506@319) mouseOver 372302 nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(458@305) mouseUp 371104 nil]
		evt: 	[(458@305) mouseUp 371104 nil]
	Receiver's instance variables: 
		bounds: 	(506@319) corner: (522@335)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(506@319) corner: (522@335)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(506@319) mouseOver 372302 nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(458@305) mouseUp 371104 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	368093
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#spawnBalloonFor: -> a HandMorph(268082944)) Mo[..]
		lastAlarmTime: 	372324
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	368093
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#spawnBalloonFor: -> a HandMorph(268082944)) Mo[..]
		lastAlarmTime: 	372324
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndeclaredVariable>>runtimeUndeclaredReadInContext:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Attempt to read undeclared variable GraphDBClient
26 September 2025 2:04:25.348794 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndeclaredVariable>>runtimeUndeclaredReadInContext:
	Receiver: #GraphDBClient->nil
	Arguments and temporary variables: 
		aContext: 	UndefinedObject>>DoIt
	Receiver's instance variables: 
		name: 	#GraphDBClient
		value: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	GraphDBClient open
		source: 	'GraphDBClient open.'
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'GraphDBClient open.'
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary()
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 19) ]
		text: 	an ObservableValueHolder[ 'GraphDBClient open.' ]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary()
		aString: 	'GraphDBClient open.'
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 19) ]
		text: 	an ObservableValueHolder[ 'GraphDBClient open.' ]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(413387520))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(413387520)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		event: 	[(17.0@11.0) mouseUp 449563 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		evt: 	[(17.0@11.0) mouseUp 449563 nil]
		all: 	an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(9296[..]
		m: 	a SpToolbarButtonMorph(413387520)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(929611520) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(929611520) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		evt: 	[(17.0@11.0) mouseUp 449563 nil]
		all: 	an Array(a SpToolbarButtonMorph(413387520) a SpToolbarButtonMorph(9296[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		anEvent: 	[(17.0@11.0) mouseUp 449563 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(17.0@11.0) mouseUp 449563 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(413387520)
	Receiver's instance variables: 
		timeStamp: 	449563
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(17.0@11.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		anEvent: 	[(17.0@11.0) mouseUp 449563 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(413387520)
	Arguments and temporary variables: 
		anEvent: 	[(17.0@11.0) mouseUp 449563 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(651011840)
		submorphs: 	an Array(an AlignmentMorph(697674240))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (340810496) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(666343936)'Do it all'
		iconMorph: 	an ImageMorph(536331776)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(47@539) mouseUp 449563 nil]
		focusHolder: 	a SpToolbarButtonMorph(413387520)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(17.0@11.0) mouseUp 449563 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(97@571) corner: (113@587)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(97@571) corner: (113@587)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@571) mouseOver 450730 nil]
		targetOffset: 	(35.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(47@539) mouseUp 449563 nil]
		focusHolder: 	a SpToolbarButtonMorph(413387520)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(17.0@11.0) mouseUp 449563 nil]
	Receiver's instance variables: 
		bounds: 	(97@571) corner: (113@587)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(97@571) corner: (113@587)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@571) mouseOver 450730 nil]
		targetOffset: 	(35.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(47@539) mouseUp 449563 nil]
		focusHolder: 	a SpToolbarButtonMorph(413387520)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(97@571) corner: (113@587)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(97@571) corner: (113@587)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@571) mouseOver 450730 nil]
		targetOffset: 	(35.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(47@539) mouseUp 449563 nil]
	Receiver's instance variables: 
		bounds: 	(97@571) corner: (113@587)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(97@571) corner: (113@587)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@571) mouseOver 450730 nil]
		targetOffset: 	(35.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(47@539) mouseUp 449563 nil]
		evt: 	[(47@539) mouseUp 449563 nil]
	Receiver's instance variables: 
		bounds: 	(97@571) corner: (113@587)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(97@571) corner: (113@587)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1072040448)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@571) mouseOver 450730 nil]
		targetOffset: 	(35.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(47@539) mouseUp 449563 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	449847
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(518868480)))
		lastAlarmTime: 	450753
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	449847
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(518868480)))
		lastAlarmTime: 	450753
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndeclaredVariable>>runtimeUndeclaredReadInContext:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpPresenter class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:07:21.167536 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		useSlots: 	false
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| cls "=== Part 1: Smalltalk Spec2 client that just prints the [..]
		source: 	'"=== Part 1: Smalltalk Spec2 client that just prints the SQL to Tr[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"=== Part 1: Smalltalk Spec2 client that just prints the SQL to T[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary()
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2277) ]
		text: 	an ObservableValueHolder[ '"=== Part 1: Smalltalk Spec2 client that j[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary()
		aString: 	'"=== Part 1: Smalltalk Spec2 client that just prints the SQL to T[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2277) ]
		text: 	an ObservableValueHolder[ '"=== Part 1: Smalltalk Spec2 client that j[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(20.0@18.0) mouseUp 626568 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20.0@18.0) mouseUp 626568 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20.0@18.0) mouseUp 626568 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20.0@18.0) mouseUp 626568 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20.0@18.0) mouseUp 626568 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	626568
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20.0@18.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20.0@18.0) mouseUp 626568 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20.0@18.0) mouseUp 626568 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(116@266) mouseUp 626568 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20.0@18.0) mouseUp 626568 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(116@266) corner: (132@282)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(116@266) corner: (132@282)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(992693760)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@266) mouseUp 626568 nil]
		targetOffset: 	(20.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(116@266) mouseUp 626568 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20.0@18.0) mouseUp 626568 nil]
	Receiver's instance variables: 
		bounds: 	(116@266) corner: (132@282)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(116@266) corner: (132@282)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(992693760)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@266) mouseUp 626568 nil]
		targetOffset: 	(20.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(116@266) mouseUp 626568 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(116@266) corner: (132@282)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(116@266) corner: (132@282)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(992693760)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@266) mouseUp 626568 nil]
		targetOffset: 	(20.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(116@266) mouseUp 626568 nil]
	Receiver's instance variables: 
		bounds: 	(116@266) corner: (132@282)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(116@266) corner: (132@282)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(992693760)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@266) mouseUp 626568 nil]
		targetOffset: 	(20.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(116@266) mouseUp 626568 nil]
		evt: 	[(116@266) mouseUp 626568 nil]
	Receiver's instance variables: 
		bounds: 	(116@266) corner: (132@282)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(116@266) corner: (132@282)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(992693760)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@266) mouseUp 626568 nil]
		targetOffset: 	(20.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(116@266) mouseUp 626568 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	603771
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	626556
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	603771
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	626556
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpPresenter class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:11:23.723292 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
		ex3: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
 [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ :ex3 |
                "4) ivars + packag[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:package:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientA[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex3 |
                "4) ivars + package (last try)"
   [..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ "3) slots + package"
              SpPres[..]
		numArgs: 	0
		receiver: 	nil


[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:instanceV[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ :ex2 |
            [ "3) slots + package"[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:instanceVariableNames:class[..]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn [..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
    [..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex2 |
            [ "3) slots + package"
              Sp[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ "2) ivars + category"
          SpPresent[..]
		numArgs: 	0
		receiver: 	nil


[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #[..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ :ex1 |
        [ "2) ivars + category"
  [..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:category:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slot[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresent[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ "1) slots + category"
      SpPresenter
 [..]
		numArgs: 	0
		receiver: 	nil


[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

SystemEnvironment(Dictionary)>>at:ifAbsent:
	Receiver: a SystemEnvironment(lots of globals)
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		tally: 	10822
		array: 	an Array(nil #FFI_x86_64->FFI_x86_64 #SystemVersionTest->SystemVersi[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ASTAbstractBlockVisitor #ASTAbst[..]
		cachedBehaviors: 	an OrderedCollection(AColorSelectorMorph AColorSelectorMor[..]
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SmalltalkImage>>at:ifAbsent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		globals: 	a SystemEnvironment(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap S[..]
		vm: 	a VirtualMachine


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| cls "=== Robust installer for Part 1 Spec2 client (handles ca[..]
		source: 	'"=== Robust installer for Part 1 Spec2 client (handles category/pa[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"=== Robust installer for Part 1 Spec2 client (handles category/p[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #useSlots->nil )
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2734) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #useSlots->nil )
		aString: 	'"=== Robust installer for Part 1 Spec2 client (handles category/p[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2734) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter



--- The full stack ---
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
SystemEnvironment(Dictionary)>>at:ifAbsent:
SmalltalkImage>>at:ifAbsent:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpPresenter class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:12:50.136917 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
		ex3: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
 [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ :ex3 |
                "4) ivars + packag[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:package:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientA[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex3 |
                "4) ivars + package (last try)"
   [..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ "3) slots + package"
              SpPres[..]
		numArgs: 	0
		receiver: 	nil


[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:instanceV[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ :ex2 |
            [ "3) slots + package"[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:instanceVariableNames:class[..]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn [..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
    [..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex2 |
            [ "3) slots + package"
              Sp[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ "2) ivars + category"
          SpPresent[..]
		numArgs: 	0
		receiver: 	nil


[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #[..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ :ex1 |
        [ "2) ivars + category"
  [..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:category:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slot[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresent[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ "1) slots + category"
      SpPresenter
 [..]
		numArgs: 	0
		receiver: 	nil


[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

SystemEnvironment(Dictionary)>>at:ifAbsent:
	Receiver: a SystemEnvironment(lots of globals)
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		tally: 	10822
		array: 	an Array(nil #FFI_x86_64->FFI_x86_64 #SystemVersionTest->SystemVersi[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ASTAbstractBlockVisitor #ASTAbst[..]
		cachedBehaviors: 	an OrderedCollection(AColorSelectorMorph AColorSelectorMor[..]
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SmalltalkImage>>at:ifAbsent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		globals: 	a SystemEnvironment(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap S[..]
		vm: 	a VirtualMachine


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	cls := Smalltalk at: #SQLClientApp ifAbsent: [
			       [ "1) [..]
		source: 	'cls := (Smalltalk at: #SQLClientApp ifAbsent: [
    [ "1) slots + [..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'cls := (Smalltalk at: #SQLClientApp ifAbsent: [
    [ "1) slots +[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (178 to: 1348) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
		aString: 	'cls := (Smalltalk at: #SQLClientApp ifAbsent: [
    [ "1) slots +[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (178 to: 1348) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
		aString: 	'cls := (Smalltalk at: #SQLClientApp ifAbsent: [
    [ "1) slots +[..]
		aBlock: 	[ :result | ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
		aBlock: 	[ :result | ]
		selection: 	'cls := (Smalltalk at: #SQLClientApp ifAbsent: [
    [ "1) slots[..]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCodeDoItCommand>>execute
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodeDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDoIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it)



--- The full stack ---
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
SystemEnvironment(Dictionary)>>at:ifAbsent:
SmalltalkImage>>at:ifAbsent:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodeDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ aCommand execute ] in SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpPresenter class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:13:07.778328 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
		ex3: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
 [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ :ex3 |
                "4) ivars + packag[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:package:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientA[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex3 |
                "4) ivars + package (last try)"
   [..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ "3) slots + package"
              SpPres[..]
		numArgs: 	0
		receiver: 	nil


[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:instanceV[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ :ex2 |
            [ "3) slots + package"[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:instanceVariableNames:class[..]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn [..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
    [..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex2 |
            [ "3) slots + package"
              Sp[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ "2) ivars + category"
          SpPresent[..]
		numArgs: 	0
		receiver: 	nil


[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #[..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ :ex1 |
        [ "2) ivars + category"
  [..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:category:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slot[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresent[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ "1) slots + category"
      SpPresenter
 [..]
		numArgs: 	0
		receiver: 	nil


[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

SystemEnvironment(Dictionary)>>at:ifAbsent:
	Receiver: a SystemEnvironment(lots of globals)
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		tally: 	10822
		array: 	an Array(nil #FFI_x86_64->FFI_x86_64 #SystemVersionTest->SystemVersi[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ASTAbstractBlockVisitor #ASTAbst[..]
		cachedBehaviors: 	an OrderedCollection(AColorSelectorMorph AColorSelectorMor[..]
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SmalltalkImage>>at:ifAbsent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		globals: 	a SystemEnvironment(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap S[..]
		vm: 	a VirtualMachine


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| cls "=== Robust installer for Part 1 Spec2 client (handles ca[..]
		source: 	'"=== Robust installer for Part 1 Spec2 client (handles category/pa[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"=== Robust installer for Part 1 Spec2 client (handles category/p[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2734) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
		aString: 	'"=== Robust installer for Part 1 Spec2 client (handles category/p[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2734) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter



--- The full stack ---
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
SystemEnvironment(Dictionary)>>at:ifAbsent:
SmalltalkImage>>at:ifAbsent:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Object class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:14:20.001146 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

Object class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: Object
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClient instanceVariableNames: '' classVariableNames[..]
		exception: 	Instance of Object class did not understand #subclass:instanceVa[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 446)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*Collections-DoubleLinkedList) - 1 selector(s[..]
		subclasses: 	{Exception. Path. AbstractAnnouncementSubscription. Stream. Abs[..]
		name: 	#Object
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	41815700
		packageTag: 	a PackageTag(Objects)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	PackageOrganizer default ensurePackage: 'GraphDBClient'. "Part [..]
		source: 	'"Part 1 client without Spec2 — simple, reliable, prints SQL to Tra[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Part 1 client without Spec2 — simple, reliable, prints SQL to Tr[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 1016) ]
		text: 	an ObservableValueHolder[ '"Part 1 client without Spec2 — simple, rel[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
		aString: 	'"Part 1 client without Spec2 — simple, reliable, prints SQL to Tr[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 1016) ]
		text: 	an ObservableValueHolder[ '"Part 1 client without Spec2 — simple, rel[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(25@21) mouseUp 1043910 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(25@21) mouseUp 1043910 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(25@21) mouseUp 1043910 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(25@21) mouseUp 1043910 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	1043910
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(25@21)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(25@21) mouseUp 1043910 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(54@91) corner: (70@107)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(54@91) corner: (70@107)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(54@91) mouseOver 1045379 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(54@91) corner: (70@107)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(54@91) corner: (70@107)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(54@91) mouseOver 1045379 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(54@91) corner: (70@107)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(54@91) corner: (70@107)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(54@91) mouseOver 1045379 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(54@91) corner: (70@107)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(54@91) corner: (70@107)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(54@91) mouseOver 1045379 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		evt: 	[(30@67) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(54@91) corner: (70@107)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(54@91) corner: (70@107)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(54@91) mouseOver 1045379 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	950052
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(37836544)))
		lastAlarmTime: 	1045402
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	950052
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(37836544)))
		lastAlarmTime: 	1045402
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Object class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Object class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 2:14:41.903478 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

Object class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: Object
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClient instanceVariableNames: '' classVariableNames[..]
		exception: 	Instance of Object class did not understand #subclass:instanceVa[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 446)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*Collections-DoubleLinkedList) - 1 selector(s[..]
		subclasses: 	{Exception. Path. AbstractAnnouncementSubscription. Stream. Abs[..]
		name: 	#Object
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	41815700
		packageTag: 	a PackageTag(Objects)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	PackageOrganizer default ensurePackage: 'GraphDBClient'. "Part [..]
		source: 	'"Part 1 client without Spec2 — simple, reliable, prints SQL to Tra[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Part 1 client without Spec2 — simple, reliable, prints SQL to Tr[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 1016) ]
		text: 	an ObservableValueHolder[ '"Part 1 client without Spec2 — simple, rel[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#cls->nil #ex1->nil #ex2->nil #ex3->nil #useSlots[..]
		aString: 	'"Part 1 client without Spec2 — simple, reliable, prints SQL to Tr[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 1016) ]
		text: 	an ObservableValueHolder[ '"Part 1 client without Spec2 — simple, rel[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(25@21) mouseUp 1043910 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(25@21) mouseUp 1043910 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(25@21) mouseUp 1043910 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(25@21) mouseUp 1043910 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	1043910
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(25@21)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(25@21) mouseUp 1043910 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(22@184) corner: (38@200)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(22@184) corner: (38@200)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@184) mouseUp 1067299 nil]
		targetOffset: 	(17.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(25@21) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(22@184) corner: (38@200)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(22@184) corner: (38@200)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@184) mouseUp 1067299 nil]
		targetOffset: 	(17.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(22@184) corner: (38@200)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(22@184) corner: (38@200)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@184) mouseUp 1067299 nil]
		targetOffset: 	(17.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(22@184) corner: (38@200)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(22@184) corner: (38@200)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@184) mouseUp 1067299 nil]
		targetOffset: 	(17.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
		evt: 	[(30@67) mouseUp 1043910 nil]
	Receiver's instance variables: 
		bounds: 	(22@184) corner: (38@200)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(22@184) corner: (38@200)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@184) mouseUp 1067299 nil]
		targetOffset: 	(17.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(30@67) mouseUp 1043910 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1064108
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(37836544)))
		lastAlarmTime: 	1067287
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1064108
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(37836544)))
		lastAlarmTime: 	1067287
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Object class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Object class >> #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
26 September 2025 2:15:42.039029 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

Object class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClient instanceVariableNames: '' classVariableNames[..]
		exception: 	Instance of Object class did not understand #subclass:instanceVa[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 446)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*Collections-DoubleLinkedList) - 1 selector(s[..]
		subclasses: 	{Exception. Path. AbstractAnnouncementSubscription. Stream. Abs[..]
		name: 	#Object
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	41815700
		packageTag: 	a PackageTag(Objects)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Object
		subclass: #SQLClient
		instanceVariableNames: ''
		cla[..]
		source: 	'Object
    subclass: #SQLClient
    instanceVariableNames: ''''
  [..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'Object
    subclass: #SQLClient
    instanceVariableNames: ''''
 [..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #ex1->nil #ex2->nil #ex3->nil #[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 145) ]
		text: 	an ObservableValueHolder[ 'Object
    subclass: #SQLClient
    instan[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #ex1->nil #ex2->nil #ex3->nil #[..]
		aString: 	'Object
    subclass: #SQLClient
    instanceVariableNames: ''''
 [..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 145) ]
		text: 	an ObservableValueHolder[ 'Object
    subclass: #SQLClient
    instan[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(16@16) mouseUp 1127442 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(16@16) mouseUp 1127442 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(16@16) mouseUp 1127442 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(16@16) mouseUp 1127442 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(16@16) mouseUp 1127442 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	1127442
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(16@16)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(16@16) mouseUp 1127442 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(16@16) mouseUp 1127442 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	nil
		color: 	(Color r: 0.22678396871945258 g: 0.2727272727272727 b: 0.37047898338[..]
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@62) mouseUp 1127442 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(16@16) mouseUp 1127442 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(21@62) corner: (37@78)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(21@62) corner: (37@78)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(21@62) mouseUp 1127442 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(21@62) mouseUp 1127442 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(16@16) mouseUp 1127442 nil]
	Receiver's instance variables: 
		bounds: 	(21@62) corner: (37@78)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(21@62) corner: (37@78)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(21@62) mouseUp 1127442 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@62) mouseUp 1127442 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(21@62) corner: (37@78)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(21@62) corner: (37@78)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(21@62) mouseUp 1127442 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@62) mouseUp 1127442 nil]
	Receiver's instance variables: 
		bounds: 	(21@62) corner: (37@78)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(21@62) corner: (37@78)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(21@62) mouseUp 1127442 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@62) mouseUp 1127442 nil]
		evt: 	[(21@62) mouseUp 1127442 nil]
	Receiver's instance variables: 
		bounds: 	(21@62) corner: (37@78)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	(21@62) corner: (37@78)
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(21@62) mouseUp 1127442 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(21@62) mouseUp 1127442 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1064108
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(37836544)))
		lastAlarmTime: 	1127430
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1064108
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(37836544)))
		lastAlarmTime: 	1127430
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	(0@0) corner: (1470@919)
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Object class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SQLite3Database class >> #onMemory
26 September 2025 2:42:06.911368 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SQLite3Database class(Object)>>doesNotUnderstand: #onMemory
	Receiver: SQLite3Database
	Arguments and temporary variables: 
		aMessage: 	onMemory
		exception: 	Instance of SQLite3Database class did not understand #onMemory
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->SQLite3Database>>#close #connection-[..]
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (open/close) - 2 selector(s) Protocol (accessi[..]
		subclasses: 	nil
		name: 	#SQLite3Database
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	8689
		packageTag: 	a PackageTag(Base)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	nil
		sql: 	'SELECT name FROM Person WHERE age > 30;'
		db: 	nil
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql db valid |
	sql := UIManager default request: 'Type SQL ([..]
		source: 	'| sql db valid |
sql := UIManager default request: ''Type SQL (bla[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql db valid |
sql := UIManager default request: ''Type SQL (bl[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #ex1->nil #ex2->nil #ex3->nil #[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 615) ]
		text: 	an ObservableValueHolder[ '| sql db valid |
sql := UIManager default [..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #ex1->nil #ex2->nil #ex3->nil #[..]
		aString: 	'| sql db valid |
sql := UIManager default request: ''Type SQL (bl[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 615) ]
		text: 	an ObservableValueHolder[ '| sql db valid |
sql := UIManager default [..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(20@21) mouseUp 2677048 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20@21) mouseUp 2677048 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20@21) mouseUp 2677048 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@21) mouseUp 2677048 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20@21) mouseUp 2677048 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	2677048
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20@21)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@21) mouseUp 2677048 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@21) mouseUp 2677048 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@67) mouseUp 2677048 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20@21) mouseUp 2677048 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(935@511) corner: (951@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(935@511) mouseOver 2712283 nil]
		targetOffset: 	(31.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(25@67) mouseUp 2677048 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20@21) mouseUp 2677048 nil]
	Receiver's instance variables: 
		bounds: 	(935@511) corner: (951@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(935@511) mouseOver 2712283 nil]
		targetOffset: 	(31.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@67) mouseUp 2677048 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(935@511) corner: (951@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(935@511) mouseOver 2712283 nil]
		targetOffset: 	(31.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@67) mouseUp 2677048 nil]
	Receiver's instance variables: 
		bounds: 	(935@511) corner: (951@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(935@511) mouseOver 2712283 nil]
		targetOffset: 	(31.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@67) mouseUp 2677048 nil]
		evt: 	[(25@67) mouseUp 2677048 nil]
	Receiver's instance variables: 
		bounds: 	(935@511) corner: (951@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(935@511) mouseOver 2712283 nil]
		targetOffset: 	(31.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(25@67) mouseUp 2677048 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2651592
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245488384)) MorphicAla[..]
		lastAlarmTime: 	2712312
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2651592
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245488384)) MorphicAla[..]
		lastAlarmTime: 	2712312
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
SQLite3Database class(Object)>>doesNotUnderstand: #onMemory
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpPresenter class >> #subclass:instanceVariableNames:classVariableNames:package:
26 September 2025 3:00:26.371591 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
		ex3: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
 [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ :ex3 |
                "4) ivars + packag[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[ :ex2 |
            [ "3) slots + package"
              SpPresent[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "3) slots + package"
              SpPresenter
                [..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:package:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientA[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex3 |
                "4) ivars + package (last try)"
   [..]
	Receiver's instance variables: 
		outerContext: 	[ :ex2 |
            [ "3) slots + package"
              SpP[..]
		compiledBlock: 	a CompiledBlock: [ "3) slots + package"
              SpPres[..]
		numArgs: 	0
		receiver: 	nil


[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
		ex2: 	Instance of SpPresenter class did not understand #subclass:instanceVar[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                [..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:instanceV[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ :ex2 |
            [ "3) slots + package"[..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
	Receiver's instance variables: 
		sender: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
    [..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "2) ivars + category"
          SpPresenter
            subclas[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:instanceVariableNames:class[..]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn [..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp instanceVariableNames: 'sqlInput printBtn[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:insta[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
    [..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex2 |
            [ "3) slots + package"
              Sp[..]
	Receiver's instance variables: 
		outerContext: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresente[..]
		compiledBlock: 	a CompiledBlock: [ "2) ivars + category"
          SpPresent[..]
		numArgs: 	0
		receiver: 	nil


[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
		ex1: 	Instance of SpPresenter class did not understand #subclass:slots:class[..]
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #[..]
	Arguments and temporary variables: 
		anArg: 	Instance of SpPresenter class did not understand #subclass:slots:cla[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ :ex1 |
        [ "2) ivars + category"
  [..]
		numArgs: 	1
		receiver: 	nil


Context>>evaluateSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		value: 	nil
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


Context>>handleSignal:
	Receiver: FullBlockClosure(BlockClosure)>>on:do:
	Arguments and temporary variables: 
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
	Receiver's instance variables: 
		sender: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ "1) slots + category"
      SpPresenter
        subclass: #SQLC[..]


MessageNotUnderstood(Exception)>>signal
	Receiver: Instance of SpPresenter class did not understand #subclass:slots:classVariables:category:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	SpPresenter
		signalContext: 	MessageNotUnderstood(Exception)>>signal
		handlerContext: 	FullBlockClosure(BlockClosure)>>on:do:
		outerContext: 	nil
		message: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) cl[..]
		receiver: 	SpPresenter
		reachedDefaultHandler: 	false


SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
	Receiver: SpPresenter
	Arguments and temporary variables: 
		aMessage: 	subclass: #SQLClientApp slots: #(#sqlInput #printBtn #clearBtn) c[..]
		exception: 	Instance of SpPresenter class did not understand #subclass:slots[..]
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SpAbstractPresenter
		methodDict: 	a MethodDictionary(size 196)
		format: 	65557
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (initialization) - 5 selector(s) Protocol (api[..]
		subclasses: 	{SpAbstractWidgetPresenter. SpEditableListPresenter. SpJobListP[..]
		name: 	#SpPresenter
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	71097376
		packageTag: 	a PackageTag(Base)
		customExtent: 	nil


[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slot[..]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ :ex1 |
        [ "2) ivars + category"
          SpPresent[..]
	Receiver's instance variables: 
		outerContext: 	[
    [ "1) slots + category"
      SpPresenter
        subcl[..]
		compiledBlock: 	a CompiledBlock: [ "1) slots + category"
      SpPresenter
 [..]
		numArgs: 	0
		receiver: 	nil


[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

SystemEnvironment(Dictionary)>>at:ifAbsent:
	Receiver: a SystemEnvironment(lots of globals)
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		tally: 	10936
		array: 	an Array(nil #FFI_x86_64->FFI_x86_64 #SystemVersionTest->SystemVersi[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ASTAbstractBlockVisitor #ASTAbst[..]
		cachedBehaviors: 	nil
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SmalltalkImage>>at:ifAbsent:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		key: 	#SQLClientApp
		aBlock: 	[
    [ "1) slots + category"
      SpPresenter
        subclass: #[..]
	Receiver's instance variables: 
		globals: 	a SystemEnvironment(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap S[..]
		vm: 	a VirtualMachine


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		cls: 	nil
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| cls "=== Robust installer for Part 1 Spec2 client (handles ca[..]
		source: 	'"=== Robust installer for Part 1 Spec2 client (handles category/pa[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"=== Robust installer for Part 1 Spec2 client (handles category/p[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #ex->nil #ex1->nil #ex[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2734) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #ex->nil #ex1->nil #ex[..]
		aString: 	'"=== Robust installer for Part 1 Spec2 client (handles category/p[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2734) ]
		text: 	an ObservableValueHolder[ '"=== Robust installer for Part 1 Spec2 cli[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter



--- The full stack ---
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:package:
[ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:package:
[ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ] in [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:instanceVariableNames:classVariableNames:category:
[ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ] in [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
SpPresenter class(Object)>>doesNotUnderstand: #subclass:slots:classVariables:category:
[ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ] in [
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[
    [ "1) slots + category"
      SpPresenter
        subclass: #SQLClientApp
        slots: { #sqlInput . #printBtn . #clearBtn }
        classVariables: #()
        category: 'GraphDBClient' ]
      on: MessageNotUnderstood do: [ :ex1 |
        [ "2) ivars + category"
          SpPresenter
            subclass: #SQLClientApp
            instanceVariableNames: 'sqlInput printBtn clearBtn'
            classVariableNames: ''
            category: 'GraphDBClient' ]
          on: MessageNotUnderstood do: [ :ex2 |
            [ "3) slots + package"
              SpPresenter
                subclass: #SQLClientApp
                slots: { #sqlInput . #printBtn . #clearBtn }
                classVariables: #()
                package: 'GraphDBClient' ]
              on: MessageNotUnderstood do: [ :ex3 |
                "4) ivars + package (last try)"
                SpPresenter
                  subclass: #SQLClientApp
                  instanceVariableNames: 'sqlInput printBtn clearBtn'
                  classVariableNames: ''
                  package: 'GraphDBClient' ] ] ].
    Smalltalk at: #SQLClientApp ] in UndefinedObject>>DoIt
SystemEnvironment(Dictionary)>>at:ifAbsent:
SmalltalkImage>>at:ifAbsent:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:ensure:
26 September 2025 3:08:06.527561 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.
    "Use SQLite's built-in parser check"[..]
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [ :ex |
    valid := false.
    errorMsg := ex mess[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:ensure:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT 1+1;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #ex->nil #ex1->nil #ex[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 748) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #ex->nil #ex1->nil #ex[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 748) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(24@18) mouseUp 4245119 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(24@18) mouseUp 4245119 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(24@18) mouseUp 4245119 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@18) mouseUp 4245119 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(24@18) mouseUp 4245119 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4245119
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(24@18)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@18) mouseUp 4245119 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@18) mouseUp 4245119 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@64) mouseUp 4245119 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(24@18) mouseUp 4245119 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(923@510) corner: (939@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(923@510) mouseOver 4271908 nil]
		targetOffset: 	(19.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(29@64) mouseUp 4245119 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(24@18) mouseUp 4245119 nil]
	Receiver's instance variables: 
		bounds: 	(923@510) corner: (939@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(923@510) mouseOver 4271908 nil]
		targetOffset: 	(19.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@64) mouseUp 4245119 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(923@510) corner: (939@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(923@510) mouseOver 4271908 nil]
		targetOffset: 	(19.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@64) mouseUp 4245119 nil]
	Receiver's instance variables: 
		bounds: 	(923@510) corner: (939@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(923@510) mouseOver 4271908 nil]
		targetOffset: 	(19.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@64) mouseUp 4245119 nil]
		evt: 	[(29@64) mouseUp 4245119 nil]
	Receiver's instance variables: 
		bounds: 	(923@510) corner: (939@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(923@510) mouseOver 4271908 nil]
		targetOffset: 	(19.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(29@64) mouseUp 4245119 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	3833142
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1005058560)) MorphicAl[..]
		lastAlarmTime: 	4271926
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	3833142
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1005058560)) MorphicAl[..]
		lastAlarmTime: 	4271926
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:ensure:
26 September 2025 3:08:40.412393 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.
    "Check syntax only using EXPLAIN"
  [..]
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [ :ex |
    valid := false.
    errorMsg := ex mess[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:ensure:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'| sql valid db errorMsg |sql := UIManager default request: ''Type SQL[..]
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(19@19) mouseUp 4303118 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(19@19) mouseUp 4303118 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(19@19) mouseUp 4303118 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(19@19) mouseUp 4303118 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(19@19) mouseUp 4303118 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4303118
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(19@19)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(19@19) mouseUp 4303118 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(19@19) mouseUp 4303118 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@65) mouseUp 4303118 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(19@19) mouseUp 4303118 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(915@511) corner: (931@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@511) mouseOver 4305778 nil]
		targetOffset: 	(11.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(24@65) mouseUp 4303118 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(19@19) mouseUp 4303118 nil]
	Receiver's instance variables: 
		bounds: 	(915@511) corner: (931@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@511) mouseOver 4305778 nil]
		targetOffset: 	(11.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@65) mouseUp 4303118 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(915@511) corner: (931@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@511) mouseOver 4305778 nil]
		targetOffset: 	(11.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@65) mouseUp 4303118 nil]
	Receiver's instance variables: 
		bounds: 	(915@511) corner: (931@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@511) mouseOver 4305778 nil]
		targetOffset: 	(11.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@65) mouseUp 4303118 nil]
		evt: 	[(24@65) mouseUp 4303118 nil]
	Receiver's instance variables: 
		bounds: 	(915@511) corner: (931@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@511) mouseOver 4305778 nil]
		targetOffset: 	(11.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(24@65) mouseUp 4303118 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	3833142
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(51042816)) MorphicAlar[..]
		lastAlarmTime: 	4305811
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	3833142
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(51042816)) MorphicAlar[..]
		lastAlarmTime: 	4305811
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:ensure:
26 September 2025 3:09:30.838055 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.
    "Check syntax only using EXPLAIN"
  [..]
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [ :ex |
    valid := false.
    errorMsg := ex mess[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:ensure:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT * FROM users;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(21@16) mouseUp 4348458 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(21@16) mouseUp 4348458 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(21@16) mouseUp 4348458 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(21@16) mouseUp 4348458 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21@16) mouseUp 4348458 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4348458
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21@16)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(21@16) mouseUp 4348458 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(21@16) mouseUp 4348458 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(26@62) mouseUp 4348458 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(21@16) mouseUp 4348458 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(920@513) corner: (936@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(920@513) mouseOver 4356205 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(26@62) mouseUp 4348458 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(21@16) mouseUp 4348458 nil]
	Receiver's instance variables: 
		bounds: 	(920@513) corner: (936@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(920@513) mouseOver 4356205 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(26@62) mouseUp 4348458 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(920@513) corner: (936@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(920@513) mouseOver 4356205 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(26@62) mouseUp 4348458 nil]
	Receiver's instance variables: 
		bounds: 	(920@513) corner: (936@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(920@513) mouseOver 4356205 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(26@62) mouseUp 4348458 nil]
		evt: 	[(26@62) mouseUp 4348458 nil]
	Receiver's instance variables: 
		bounds: 	(920@513) corner: (936@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(920@513) mouseOver 4356205 nil]
		targetOffset: 	(16.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(26@62) mouseUp 4348458 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950160128)) MorphicAla[..]
		lastAlarmTime: 	4356236
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(950160128)) MorphicAla[..]
		lastAlarmTime: 	4356236
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:ensure:
26 September 2025 3:11:20.952869 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.
    "Check syntax only using EXPLAIN"
  [..]
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [ :ex |
    valid := false.
    errorMsg := ex mess[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:ensure:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT 1 +1 ;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(14@9) mouseUp 4459458 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(14@9) mouseUp 4459458 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(14@9) mouseUp 4459458 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(14@9) mouseUp 4459458 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(14@9) mouseUp 4459458 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4459458
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(14@9)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(14@9) mouseUp 4459458 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(14@9) mouseUp 4459458 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@55) mouseUp 4459458 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(14@9) mouseUp 4459458 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(910@510) corner: (926@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(910@510) mouseOver 4466322 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(19@55) mouseUp 4459458 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(14@9) mouseUp 4459458 nil]
	Receiver's instance variables: 
		bounds: 	(910@510) corner: (926@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(910@510) mouseOver 4466322 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@55) mouseUp 4459458 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(910@510) corner: (926@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(910@510) mouseOver 4466322 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@55) mouseUp 4459458 nil]
	Receiver's instance variables: 
		bounds: 	(910@510) corner: (926@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(910@510) mouseOver 4466322 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@55) mouseUp 4459458 nil]
		evt: 	[(19@55) mouseUp 4459458 nil]
	Receiver's instance variables: 
		bounds: 	(910@510) corner: (926@526)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(910@510) mouseOver 4466322 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(19@55) mouseUp 4459458 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221598464)) MorphicAla[..]
		lastAlarmTime: 	4466351
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(221598464)) MorphicAla[..]
		lastAlarmTime: 	4466351
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SQLite3Database class >> #open:
26 September 2025 3:11:58.123917 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SQLite3Database class(Object)>>doesNotUnderstand: #open:
	Receiver: SQLite3Database
	Arguments and temporary variables: 
		aMessage: 	open: ':memory:'
		exception: 	Instance of SQLite3Database class did not understand #open:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->SQLite3Database>>#close #connection-[..]
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (open/close) - 2 selector(s) Protocol (accessi[..]
		subclasses: 	nil
		name: 	#SQLite3Database
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	8689
		packageTag: 	a PackageTag(Base)


[
    db := SQLite3Database open: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
        on: Error do: [ :ex |
            valid := false.
            errorMsg := ex messageText ].

] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'SELECT 1+1;'
		valid: 	true
		db: 	nil
		errorMsg: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
     [..]
	Arguments and temporary variables: 
		aBlock: 	[
    db ifNotNil: [ db close ].
]
		handler: 	[
    db ifNotNil: [ db close ].
]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT 1+1;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 735) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 735) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(24@23) mouseUp 4496971 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(24@23) mouseUp 4496971 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(24@23) mouseUp 4496971 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@23) mouseUp 4496971 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(24@23) mouseUp 4496971 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4496971
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(24@23)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@23) mouseUp 4496971 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@23) mouseUp 4496971 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@69) mouseUp 4496971 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(24@23) mouseUp 4496971 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(915@517) corner: (931@533)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@517) mouseOver 4503506 nil]
		targetOffset: 	(11.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(29@69) mouseUp 4496971 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(24@23) mouseUp 4496971 nil]
	Receiver's instance variables: 
		bounds: 	(915@517) corner: (931@533)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@517) mouseOver 4503506 nil]
		targetOffset: 	(11.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@69) mouseUp 4496971 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(915@517) corner: (931@533)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@517) mouseOver 4503506 nil]
		targetOffset: 	(11.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@69) mouseUp 4496971 nil]
	Receiver's instance variables: 
		bounds: 	(915@517) corner: (931@533)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@517) mouseOver 4503506 nil]
		targetOffset: 	(11.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@69) mouseUp 4496971 nil]
		evt: 	[(29@69) mouseUp 4496971 nil]
	Receiver's instance variables: 
		bounds: 	(915@517) corner: (931@533)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(915@517) mouseOver 4503506 nil]
		targetOffset: 	(11.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(29@69) mouseUp 4496971 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(383355392)) MorphicAla[..]
		lastAlarmTime: 	4503526
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(383355392)) MorphicAla[..]
		lastAlarmTime: 	4503526
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
SQLite3Database class(Object)>>doesNotUnderstand: #open:
[
    db := SQLite3Database open: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
        on: Error do: [ :ex |
            valid := false.
            errorMsg := ex messageText ].

] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SQLite3Database >> #openOn:
26 September 2025 3:12:34.473001 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SQLite3Database(Object)>>doesNotUnderstand: #openOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	openOn: ':memory:'
		exception: 	Instance of SQLite3Database did not understand #openOn:
		resumeValue: 	nil
	Receiver's instance variables: 
		connection: 	nil


[
    db := SQLite3Database new openOn: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
        on: Error do: [ :ex |
            valid := false.
            errorMsg := ex messageText ].

] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'| sql valid db errorMsg |sql := UIManager default request: ''Type SQL[..]
		valid: 	true
		db: 	nil
		errorMsg: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
    db := SQLite3Database new openOn: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ][..]
	Arguments and temporary variables: 
		aBlock: 	[
    db ifNotNil: [ db close ].
]
		handler: 	[
    db ifNotNil: [ db close ].
]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database new openOn: ':m[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'| sql valid db errorMsg |sql := UIManager default request: ''Type SQL[..]
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 741) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 741) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(23@23) mouseUp 4536795 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(23@23) mouseUp 4536795 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(23@23) mouseUp 4536795 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(23@23) mouseUp 4536795 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(23@23) mouseUp 4536795 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4536795
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(23@23)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(23@23) mouseUp 4536795 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(23@23) mouseUp 4536795 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(28@69) mouseUp 4536795 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(23@23) mouseUp 4536795 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(930@516) corner: (946@532)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(930@516) mouseOver 4539837 nil]
		targetOffset: 	(26.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(28@69) mouseUp 4536795 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(23@23) mouseUp 4536795 nil]
	Receiver's instance variables: 
		bounds: 	(930@516) corner: (946@532)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(930@516) mouseOver 4539837 nil]
		targetOffset: 	(26.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(28@69) mouseUp 4536795 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(930@516) corner: (946@532)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(930@516) mouseOver 4539837 nil]
		targetOffset: 	(26.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(28@69) mouseUp 4536795 nil]
	Receiver's instance variables: 
		bounds: 	(930@516) corner: (946@532)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(930@516) mouseOver 4539837 nil]
		targetOffset: 	(26.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(28@69) mouseUp 4536795 nil]
		evt: 	[(28@69) mouseUp 4536795 nil]
	Receiver's instance variables: 
		bounds: 	(930@516) corner: (946@532)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(930@516) mouseOver 4539837 nil]
		targetOffset: 	(26.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(28@69) mouseUp 4536795 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(909797120)) MorphicAla[..]
		lastAlarmTime: 	4539873
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(909797120)) MorphicAla[..]
		lastAlarmTime: 	4539873
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
SQLite3Database(Object)>>doesNotUnderstand: #openOn:
[
    db := SQLite3Database new openOn: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
        on: Error do: [ :ex |
            valid := false.
            errorMsg := ex messageText ].

] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SQLite3Database class >> #open:
26 September 2025 3:13:32.589075 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

SQLite3Database class(Object)>>doesNotUnderstand: #open:
	Receiver: SQLite3Database
	Arguments and temporary variables: 
		aMessage: 	open: ':memory:'
		exception: 	Instance of SQLite3Database class did not understand #open:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#close->SQLite3Database>>#close #connection-[..]
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (open/close) - 2 selector(s) Protocol (accessi[..]
		subclasses: 	nil
		name: 	#SQLite3Database
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	8689
		packageTag: 	a PackageTag(Base)


[
    db := SQLite3Database open: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
        on: Error do: [ :ex |
            valid := false.
            errorMsg := ex messageText ].

] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'SELECT 1+1;'
		valid: 	true
		db: 	nil
		errorMsg: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
     [..]
	Arguments and temporary variables: 
		aBlock: 	[
    db ifNotNil: [ db close ].
]
		handler: 	[
    db ifNotNil: [ db close ].
]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT 1+1;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 735) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 735) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(24@17) mouseUp 4591219 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(24@17) mouseUp 4591219 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(24@17) mouseUp 4591219 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@17) mouseUp 4591219 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(24@17) mouseUp 4591219 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4591219
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(24@17)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@17) mouseUp 4591219 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(24@17) mouseUp 4591219 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@63) mouseUp 4591219 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(24@17) mouseUp 4591219 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(934@511) corner: (950@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(934@511) mouseOver 4597970 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(29@63) mouseUp 4591219 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(24@17) mouseUp 4591219 nil]
	Receiver's instance variables: 
		bounds: 	(934@511) corner: (950@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(934@511) mouseOver 4597970 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@63) mouseUp 4591219 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(934@511) corner: (950@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(934@511) mouseOver 4597970 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@63) mouseUp 4591219 nil]
	Receiver's instance variables: 
		bounds: 	(934@511) corner: (950@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(934@511) mouseOver 4597970 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(29@63) mouseUp 4591219 nil]
		evt: 	[(29@63) mouseUp 4591219 nil]
	Receiver's instance variables: 
		bounds: 	(934@511) corner: (950@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(934@511) mouseOver 4597970 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(29@63) mouseUp 4591219 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(445132288)) MorphicAla[..]
		lastAlarmTime: 	4597986
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4356076
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(445132288)) MorphicAla[..]
		lastAlarmTime: 	4597986
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
SQLite3Database class(Object)>>doesNotUnderstand: #open:
[
    db := SQLite3Database open: ':memory:'.

    [ db exec: 'EXPLAIN ' , sql ]
        on: Error do: [ :ex |
            valid := false.
            errorMsg := ex messageText ].

] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:ensure:
26 September 2025 3:13:48.135204 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.
    "Check syntax only using EXPLAIN"
  [..]
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [ :ex |
    valid := false.
    errorMsg := ex mess[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:ensure:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT 1+1;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(29@19) mouseUp 4607895 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(29@19) mouseUp 4607895 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(29@19) mouseUp 4607895 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(29@19) mouseUp 4607895 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(29@19) mouseUp 4607895 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4607895
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(29@19)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(29@19) mouseUp 4607895 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(29@19) mouseUp 4607895 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(34@65) mouseUp 4607895 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(29@19) mouseUp 4607895 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(926@514) corner: (942@530)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@514) mouseOver 4613502 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(34@65) mouseUp 4607895 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(29@19) mouseUp 4607895 nil]
	Receiver's instance variables: 
		bounds: 	(926@514) corner: (942@530)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@514) mouseOver 4613502 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(34@65) mouseUp 4607895 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(926@514) corner: (942@530)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@514) mouseOver 4613502 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(34@65) mouseUp 4607895 nil]
	Receiver's instance variables: 
		bounds: 	(926@514) corner: (942@530)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@514) mouseOver 4613502 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(34@65) mouseUp 4607895 nil]
		evt: 	[(34@65) mouseUp 4607895 nil]
	Receiver's instance variables: 
		bounds: 	(926@514) corner: (942@530)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@514) mouseOver 4613502 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(34@65) mouseUp 4607895 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4612937
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(693837568)) MorphicAla[..]
		lastAlarmTime: 	4613532
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4612937
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(693837568)) MorphicAla[..]
		lastAlarmTime: 	4613532
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:ensure:
26 September 2025 3:14:31.704329 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
	Receiver: [
    db := SQLite3Database open: ':memory:'.
    "Check syntax only using EXPLAIN"
  [..]
	Arguments and temporary variables: 
		aMessage: 	on: Error do: [ :ex |
    valid := false.
    errorMsg := ex mess[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:ensure:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    db := SQLite3Database open: ':memory:[..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		valid: 	true
		db: 	nil
		errorMsg: 	nil
		sql: 	'SELECT 1 +1;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql valid db errorMsg |
	sql := UIManager default request: 'T[..]
		source: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Type[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#c->nil #cls->nil #db->nil #errorMsg->nil #ex->ni[..]
		aString: 	'| sql valid db errorMsg |
sql := UIManager default request: ''Typ[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 744) ]
		text: 	an ObservableValueHolder[ '| sql valid db errorMsg |
sql := UIManager[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(7@28) mouseUp 4650268 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(7@28) mouseUp 4650268 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(7@28) mouseUp 4650268 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(7@28) mouseUp 4650268 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(7@28) mouseUp 4650268 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	4650268
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(7@28)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(7@28) mouseUp 4650268 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(7@28) mouseUp 4650268 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(12@74) mouseUp 4650268 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(7@28) mouseUp 4650268 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(931@502) corner: (947@518)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@502) mouseOver 4657076 nil]
		targetOffset: 	(27.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(12@74) mouseUp 4650268 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(7@28) mouseUp 4650268 nil]
	Receiver's instance variables: 
		bounds: 	(931@502) corner: (947@518)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@502) mouseOver 4657076 nil]
		targetOffset: 	(27.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(12@74) mouseUp 4650268 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(931@502) corner: (947@518)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@502) mouseOver 4657076 nil]
		targetOffset: 	(27.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(12@74) mouseUp 4650268 nil]
	Receiver's instance variables: 
		bounds: 	(931@502) corner: (947@518)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@502) mouseOver 4657076 nil]
		targetOffset: 	(27.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(12@74) mouseUp 4650268 nil]
		evt: 	[(12@74) mouseUp 4650268 nil]
	Receiver's instance variables: 
		bounds: 	(931@502) corner: (947@518)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@502) mouseOver 4657076 nil]
		targetOffset: 	(27.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(12@74) mouseUp 4650268 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4612937
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(918868480)) MorphicAla[..]
		lastAlarmTime: 	4657109
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	4612937
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(918868480)) MorphicAla[..]
		lastAlarmTime: 	4657109
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:ensure:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Attempt to read undeclared variable ZnRequestError
26 September 2025 3:33:17.074434 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndeclaredVariable>>runtimeUndeclaredReadInContext:
	Receiver: #ZnRequestError->nil
	Arguments and temporary variables: 
		aContext: 	UndefinedObject>>DoIt
	Receiver's instance variables: 
		name: 	#ZnRequestError
		value: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		client: 	nil
		resp: 	nil
		sql: 	'SELECT * FROM users;'
		body: 	'SELECT * FROM users;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* FROM users;'
		lc: 	'select * from users;'
		fromPos: 	9
		afterFrom: 	'users;'
		url: 	'http://localhost:8080/query'
		payload: 	'{"sql":"SELECT * FROM users;"}'
		jsonEscaped: 	'SELECT * FROM users;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql "Manual SELECT-only validator + POST to server (fixed cas[..]
		source: 	'"Manual SELECT-only validator + POST to server (fixed cascade)"
| [..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Manual SELECT-only validator + POST to server (fixed cascade)"
|[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2493) ]
		text: 	an ObservableValueHolder[ '"Manual SELECT-only validator + POST to se[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'"Manual SELECT-only validator + POST to server (fixed cascade)"
|[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2493) ]
		text: 	an ObservableValueHolder[ '"Manual SELECT-only validator + POST to se[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(16@22) mouseUp 5748925 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(16@22) mouseUp 5748925 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(16@22) mouseUp 5748925 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(16@22) mouseUp 5748925 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(16@22) mouseUp 5748925 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	5748925
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(16@22)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(16@22) mouseUp 5748925 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(16@22) mouseUp 5748925 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@68) mouseUp 5748925 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(16@22) mouseUp 5748925 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1074@520) corner: (1090@536)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1074@520) mouseOver 5782442 nil]
		targetOffset: 	(32.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(21@68) mouseUp 5748925 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(16@22) mouseUp 5748925 nil]
	Receiver's instance variables: 
		bounds: 	(1074@520) corner: (1090@536)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1074@520) mouseOver 5782442 nil]
		targetOffset: 	(32.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@68) mouseUp 5748925 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1074@520) corner: (1090@536)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1074@520) mouseOver 5782442 nil]
		targetOffset: 	(32.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@68) mouseUp 5748925 nil]
	Receiver's instance variables: 
		bounds: 	(1074@520) corner: (1090@536)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1074@520) mouseOver 5782442 nil]
		targetOffset: 	(32.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(21@68) mouseUp 5748925 nil]
		evt: 	[(21@68) mouseUp 5748925 nil]
	Receiver's instance variables: 
		bounds: 	(1074@520) corner: (1090@536)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1074@520) mouseOver 5782442 nil]
		targetOffset: 	(32.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(21@68) mouseUp 5748925 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	5770534
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(669566720)) MorphicAla[..]
		lastAlarmTime: 	5782468
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	5770534
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(669566720)) MorphicAla[..]
		lastAlarmTime: 	5782468
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndeclaredVariable>>runtimeUndeclaredReadInContext:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Attempt to read undeclared variable ZnRequestError
26 September 2025 3:35:12.29329 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndeclaredVariable>>runtimeUndeclaredReadInContext:
	Receiver: #ZnRequestError->nil
	Arguments and temporary variables: 
		aContext: 	UndefinedObject>>DoIt
	Receiver's instance variables: 
		name: 	#ZnRequestError
		value: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		client: 	nil
		resp: 	nil
		sql: 	'SELECT * FROM users;'
		body: 	'SELECT * FROM users;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* FROM users;'
		lc: 	'select * from users;'
		fromPos: 	9
		afterFrom: 	'users;'
		url: 	'http://localhost:8080/query'
		payload: 	'{"sql":"SELECT * FROM users;"}'
		jsonEscaped: 	'SELECT * FROM users;'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql "Manual SELECT-only validator + POST to server (fixed cas[..]
		source: 	'"Manual SELECT-only validator + POST to server (fixed cascade)"
| [..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Manual SELECT-only validator + POST to server (fixed cascade)"
|[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2496) ]
		text: 	an ObservableValueHolder[ '"Manual SELECT-only validator + POST to se[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'"Manual SELECT-only validator + POST to server (fixed cascade)"
|[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2496) ]
		text: 	an ObservableValueHolder[ '"Manual SELECT-only validator + POST to se[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(20@25) mouseUp 5873100 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20@25) mouseUp 5873100 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20@25) mouseUp 5873100 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@25) mouseUp 5873100 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20@25) mouseUp 5873100 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	5873100
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20@25)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@25) mouseUp 5873100 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@25) mouseUp 5873100 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@71) mouseUp 5873100 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20@25) mouseUp 5873100 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(995@511) corner: (1011@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@511) mouseOver 5897659 nil]
		targetOffset: 	(25.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(25@71) mouseUp 5873100 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20@25) mouseUp 5873100 nil]
	Receiver's instance variables: 
		bounds: 	(995@511) corner: (1011@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@511) mouseOver 5897659 nil]
		targetOffset: 	(25.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@71) mouseUp 5873100 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(995@511) corner: (1011@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@511) mouseOver 5897659 nil]
		targetOffset: 	(25.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@71) mouseUp 5873100 nil]
	Receiver's instance variables: 
		bounds: 	(995@511) corner: (1011@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@511) mouseOver 5897659 nil]
		targetOffset: 	(25.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@71) mouseUp 5873100 nil]
		evt: 	[(25@71) mouseUp 5873100 nil]
	Receiver's instance variables: 
		bounds: 	(995@511) corner: (1011@527)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(995@511) mouseOver 5897659 nil]
		targetOffset: 	(25.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(25@71) mouseUp 5873100 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	5891416
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(349500160)) MorphicAla[..]
		lastAlarmTime: 	5897691
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	5891416
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(349500160)) MorphicAla[..]
		lastAlarmTime: 	5897691
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(362372608) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndeclaredVariable>>runtimeUndeclaredReadInContext:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Attempt to read undeclared variable ZnRequestError
26 September 2025 4:33:19.214583 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndeclaredVariable>>runtimeUndeclaredReadInContext:
	Receiver: #ZnRequestError->nil
	Arguments and temporary variables: 
		aContext: 	UndefinedObject>>DoIt
	Receiver's instance variables: 
		name: 	#ZnRequestError
		value: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		client: 	nil
		resp: 	nil
		status: 	nil
		respBody: 	nil
		sql: 	'select * from abdullah;'
		body: 	'select * from abdullah;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from abdullah;'
		lc: 	'select * from abdullah;'
		fromPos: 	9
		afterFrom: 	'abdullah;'
		jsonEscaped: 	'select * from abdullah;'
		payload: 	'{"sql":"select * from abdullah;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql "Part 1 — SELECT-only validator (build + send JSON payloa[..]
		source: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| sq[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2668) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2668) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(19@15) mouseUp 133746 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(19@15) mouseUp 133746 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(19@15) mouseUp 133746 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(19@15) mouseUp 133746 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(19@15) mouseUp 133746 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	133746
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(19@15)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(19@15) mouseUp 133746 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(19@15) mouseUp 133746 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@61) mouseUp 133746 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(19@15) mouseUp 133746 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(922@513) corner: (938@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@513) mouseOver 143963 nil]
		targetOffset: 	(18.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(24@61) mouseUp 133746 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(19@15) mouseUp 133746 nil]
	Receiver's instance variables: 
		bounds: 	(922@513) corner: (938@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@513) mouseOver 143963 nil]
		targetOffset: 	(18.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@61) mouseUp 133746 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(922@513) corner: (938@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@513) mouseOver 143963 nil]
		targetOffset: 	(18.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@61) mouseUp 133746 nil]
	Receiver's instance variables: 
		bounds: 	(922@513) corner: (938@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@513) mouseOver 143963 nil]
		targetOffset: 	(18.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(24@61) mouseUp 133746 nil]
		evt: 	[(24@61) mouseUp 133746 nil]
	Receiver's instance variables: 
		bounds: 	(922@513) corner: (938@529)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@513) mouseOver 143963 nil]
		targetOffset: 	(18.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(24@61) mouseUp 133746 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6639530
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(195741440)) MorphicAla[..]
		lastAlarmTime: 	143981
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6639530
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(195741440)) MorphicAla[..]
		lastAlarmTime: 	143981
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndeclaredVariable>>runtimeUndeclaredReadInContext:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "asZnUrl" is nil
26 September 2025 4:36:43.189999 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #asZnUrl
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asZnUrl
		exception: 	#asZnUrl was sent to nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ZnClient>>url:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		urlObject: 	nil
		url: 	nil
	Receiver's instance variables: 
		request: 	a ZnRequest()
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	nil
		session: 	nil
		logLevel: 	3
		newOptions: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	client
		url: serverUrl;
		timeout: 15;
		accept: ZnMimeType ap[..]
		source: 	'client
        url: serverUrl;
        timeout: 15;
        accept[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'client
        url: serverUrl;
        timeout: 15;
        accep[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1700 to: 1948) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'client
        url: serverUrl;
        timeout: 15;
        accep[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1700 to: 1948) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
		aString: 	'client
        url: serverUrl;
        timeout: 15;
        accep[..]
		aBlock: 	[ :result | ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
		aBlock: 	[ :result | ]
		selection: 	'client
        url: serverUrl;
        timeout: 15;
        acc[..]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCodeDoItCommand>>execute
	Receiver: a SpCodeDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Do it'
		basicDescription: 	'Evaluate selection.'
		transform: 	[ :aContext | aContext ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodeDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDoIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it)


[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	7


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		handler: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [ activeProcess
			psValueAt: index
			put:[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	7


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	72358930
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	7


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		handler: 	[
			activeProcess
				psValueAt: index
				put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [ activeProcess
			psValueAt: index
			put:[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	7


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		anObject: 	a StPharoApplication
		aBlock: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	72358930
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ aCommand execute ] in SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillItem:with:
	Receiver: a SpActionMenuPresenterBuilder
	Arguments and temporary variables: 
		aMenuItem: 	a SpMenuItemPresenter
		aCommand: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ aCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillIte[..]
		compiledBlock: 	a CompiledBlock: [ aCommand execute ]
		numArgs: 	0
		receiver: 	a SpActionMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		aMenuItem: 	a SpMorphicMenuItemAdapter
		en: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Unnamed Window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Do it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection.' ]
		action: 	[ aCommand execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arguments: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(376658688)'Do it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(376658688)'Do it'
	Arguments and temporary variables: 
		evt: 	[(240@396) mouseUp 347966 nil]
		w: 	a WorldMorph(883747328) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(224.0@394.0) corner: (346.0@411.0)
		owner: 	a MenuMorph(539675392)
		submorphs: 	#()
		fullBounds: 	(224.0@394.0) corner: (346.0@411.0)
		color: 	Color white
		extension: 	a MorphExtension (87967232) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount :=[..]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		handler: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: [ | selArgCount |  "show cursor in case ite[..]
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(376658688)'Do it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |  "show cursor in case item opens a new MVC window[..]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(376658688)'Do it'
	Arguments and temporary variables: 
		evt: 	[(240@396) mouseUp 347966 nil]
		w: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(224.0@394.0) corner: (346.0@411.0)
		owner: 	a MenuMorph(539675392)
		submorphs: 	#()
		fullBounds: 	(224.0@394.0) corner: (346.0@411.0)
		color: 	Color white
		extension: 	a MorphExtension (87967232) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(376658688)'Do it'
	Arguments and temporary variables: 
		evt: 	[(240@396) mouseUp 347966 nil]
	Receiver's instance variables: 
		bounds: 	(224.0@394.0) corner: (346.0@411.0)
		owner: 	a MenuMorph(539675392)
		submorphs: 	#()
		fullBounds: 	(224.0@394.0) corner: (346.0@411.0)
		color: 	Color white
		extension: 	a MorphExtension (87967232) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(376658688)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(240@396) mouseUp 347966 nil]
	Receiver's instance variables: 
		bounds: 	(224.0@394.0) corner: (346.0@411.0)
		owner: 	a MenuMorph(539675392)
		submorphs: 	#()
		fullBounds: 	(224.0@394.0) corner: (346.0@411.0)
		color: 	Color white
		extension: 	a MorphExtension (87967232) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(240@396) mouseUp 347966 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToggleMenuItemMorph(376658688)'Do it'
	Receiver's instance variables: 
		timeStamp: 	347966
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(240@396)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(376658688)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(240@396) mouseUp 347966 nil]
	Receiver's instance variables: 
		bounds: 	(224.0@394.0) corner: (346.0@411.0)
		owner: 	a MenuMorph(539675392)
		submorphs: 	#()
		fullBounds: 	(224.0@394.0) corner: (346.0@411.0)
		color: 	Color white
		extension: 	a MorphExtension (87967232) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'⌘D'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(240@396) mouseUp 347966 nil]
		aMorph: 	a SpToggleMenuItemMorph(376658688)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(376658688)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(240@396) mouseUp 347966 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(376658688)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(240@396) mouseUp 347966 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	347966
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(240@396)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asZnUrl
ZnClient>>url:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodeDoItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodeDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[ activeProcess
			psValueAt: index
			put: anObject.
		aBlock value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ aCommand execute ] in SpActionMenuPresenterBuilder(SpMenuPresenterBuilder)>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FullBlockClosure >> #on:do:on:do:
26 September 2025 4:44:18.453228 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

FullBlockClosure(Object)>>doesNotUnderstand: #on:do:on:do:
	Receiver: [
    client := ZnClient new.
    client
        url: serverUrl;
        timeout: 15;
[..]
	Arguments and temporary variables: 
		aMessage: 	on: ZnHttpUnsuccessful do: [ :ex | UIManager default alert: 'HTTP[..]
		exception: 	Instance of FullBlockClosure did not understand #on:do:on:do:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    client := ZnClient new.
    client
  [..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		client: 	nil
		resp: 	nil
		status: 	nil
		respBody: 	nil
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql "Part 1 — SELECT-only validator (build + send JSON payloa[..]
		source: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| sq[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2292) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2292) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(18@16) mouseUp 798685 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(18@16) mouseUp 798685 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(18@16) mouseUp 798685 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(18@16) mouseUp 798685 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(18@16) mouseUp 798685 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	798685
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(18@16)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(18@16) mouseUp 798685 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(18@16) mouseUp 798685 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(23@62) mouseUp 798685 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(18@16) mouseUp 798685 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(494@402) corner: (510@418)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@402) mouseOver 799143 nil]
		targetOffset: 	(18.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(23@62) mouseUp 798685 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(18@16) mouseUp 798685 nil]
	Receiver's instance variables: 
		bounds: 	(494@402) corner: (510@418)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@402) mouseOver 799143 nil]
		targetOffset: 	(18.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(23@62) mouseUp 798685 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(494@402) corner: (510@418)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@402) mouseOver 799143 nil]
		targetOffset: 	(18.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(23@62) mouseUp 798685 nil]
	Receiver's instance variables: 
		bounds: 	(494@402) corner: (510@418)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@402) mouseOver 799143 nil]
		targetOffset: 	(18.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(23@62) mouseUp 798685 nil]
		evt: 	[(23@62) mouseUp 798685 nil]
	Receiver's instance variables: 
		bounds: 	(494@402) corner: (510@418)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(494@402) mouseOver 799143 nil]
		targetOffset: 	(18.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(23@62) mouseUp 798685 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	676407
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(800920320)) MorphicAla[..]
		lastAlarmTime: 	803222
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	676407
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(800920320)) MorphicAla[..]
		lastAlarmTime: 	803222
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		extraWorldsToDraw: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			  [..]
	Arguments and temporary variables: 
		aBlock: 	[
		self doInterCycleWait
	]
		handler: 	[
		self doInterCycleWait
	]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| extraWorldsToDraw |
		extraWorldsToDr[..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		aBlock: 	[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMute[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87953254
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemEnvironment(lots of globals)
		commentSourcePointer: 	87905972
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
FullBlockClosure(Object)>>doesNotUnderstand: #on:do:on:do:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
AlertDialogWindow(SystemWindow)>>openModal
DarkBlueTheme(UITheme)>>alertIn:text:title:configure:
MorphicUIManager>>alert:title:configure:
MorphicUIManager>>alert:title:
MorphicUIManager>>alert:
[ :ex | UIManager default alert: 'HTTP error: ', ex asString ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
ZnEntity class(Object)>>doesNotUnderstand: #text:contentType:
[
    client := ZnClient new.
    client
        url: serverUrl;
        timeout: 15;
        accept: ZnMimeType applicationJson;
        entity: (ZnEntity text: payload contentType: ZnMimeType applicationJson);  "create entity WITH content-type"
        post.                                                                     "send the request"

    resp := client response.
    status := resp code.
    respBody := resp entity ifNotNil: [ resp entity contents ] ifNil: [ '' ].

    Transcript
        cr; show: '--- HTTP Response ---'; cr;
        show: 'Status: ', status asString; cr;
        show: 'Body:   ', respBody; cr;
        show: '-----------------------'; cr.

    UIManager default inform:
        'Sent to: ', serverUrl, String cr,
        'Status: ', status asString, String cr,
        'Response body (first 500 chars): ', (respBody first: (respBody size min: 500))
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
AlertDialogWindow(SystemWindow)>>openModal
DarkBlueTheme(UITheme)>>alertIn:text:title:configure:
MorphicUIManager>>alert:title:configure:
MorphicUIManager>>alert:title:
MorphicUIManager>>alert:
[ :ex | UIManager default alert: 'HTTP error: ', ex asString ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MessageNotUnderstood(Exception)>>signal
ZnEntity class(Object)>>doesNotUnderstand: #text:contentType:
[
    client := ZnClient new.
    client
        url: serverUrl;
        timeout: 15;
        accept: ZnMimeType applicationJson;
        entity: (ZnEntity text: payload contentType: ZnMimeType applicationJson);  "create entity WITH content-type"
        post.                                                                     "send the request"

    resp := client response.
    status := resp code.
    respBody := resp entity ifNotNil: [ resp entity contents ] ifNil: [ '' ].

    Transcript
        cr; show: '--- HTTP Response ---'; cr;
        show: 'Status: ', status asString; cr;
        show: 'Body:   ', respBody; cr;
        show: '-----------------------'; cr.

    UIManager default inform:
        'Sent to: ', serverUrl, String cr,
        'Status: ', status asString, String cr,
        'Response body (first 500 chars): ', (respBody first: (respBody size min: 500))
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
AlertDialogWindow(SystemWindow)>>openModal
DarkBlueTheme(UITheme)>>alertIn:text:title:configure:
MorphicUIManager>>alert:title:configure:
MorphicUIManager>>alert:title:
MorphicUIManager>>alert:
[ :ex |
    UIManager default alert: 'HTTP error: ', ex asString ] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Error(Exception)>>signal
Error(Exception)>>signal:
ZnClient(Object)>>error:
ZnClient>>contentType:
[
	client := ZnClient new.
    client
        url: serverUrl;
        timeout: 15;
        accept: ZnMimeType applicationJson;
        contentType: ZnMimeType applicationJson;
        entity: (ZnEntity text: payload contentType: ZnMimeType applicationJson);
        method: #POST.

    resp := client execute.

    status := resp code.
    respBody := resp entity
        ifNotNil: [ resp entity contents ]
        ifNil: [ '' ].

    Transcript
        cr; show: '--- HTTP Response ---'; cr;
        show: 'Status: ', status asString; cr;
        show: 'Body:   ', respBody; cr;
        show: '-----------------------'; cr.

    UIManager default inform:
        'Sent to: ', serverUrl, String cr,
        'Status: ', status asString, String cr,
        'Response body (first 500 chars): ', (respBody first: (respBody size min: 500))
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
There is no request entity yet, cannot set its content-type
26 September 2025 4:45:23.876681 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

ZnClient(Object)>>error:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		aString: 	'There is no request entity yet, cannot set its content-type'
	Receiver's instance variables: 
		request: 	a ZnRequest()
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	nil
		session: 	nil
		logLevel: 	3
		newOptions: 	a ZnOptions


ZnClient>>contentType:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		mimeType: 	application/json
	Receiver's instance variables: 
		request: 	a ZnRequest()
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	nil
		session: 	nil
		logLevel: 	3
		newOptions: 	a ZnOptions


[
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] in [
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
		client: 	a ZnClient
		resp: 	nil
		status: 	nil
		respBody: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
        client := ZnClient new.
        client
            url: serverUrl;
         [..]
	Arguments and temporary variables: 
		exception: 	ZnHttpUnsuccessful
		handlerAction: 	[ :ex | UIManager default alert: 'HTTP error: ', ex response[..]
	Receiver's instance variables: 
		outerContext: 	[
    [
        client := ZnClient new.
        client
      [..]
		compiledBlock: 	a CompiledBlock: [
        client := ZnClient new.
        c[..]
		numArgs: 	0
		receiver: 	nil


[
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
		client: 	a ZnClient
		resp: 	nil
		status: 	nil
		respBody: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
    [
        client := ZnClient new.
        client
            url: serverUrl;
   [..]
	Arguments and temporary variables: 
		exception: 	NetworkError
		handlerAction: 	[ :ex | UIManager default alert: 'Network error: ', ex messa[..]
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    [
        client := ZnClient new.
   [..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		client: 	a ZnClient
		resp: 	nil
		status: 	nil
		respBody: 	nil
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql "Part 1 — SELECT-only validator (build + send JSON payloa[..]
		source: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| sq[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2270) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2270) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(20@14) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20@14) mouseUp 863511 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(20@14) mouseUp 863511 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@14) mouseUp 863511 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20@14) mouseUp 863511 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	863511
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20@14)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@14) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(20@14) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@60) mouseUp 863511 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20@14) mouseUp 863511 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(452@413) corner: (468@429)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@413) mouseOver 863991 nil]
		targetOffset: 	(20.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(25@60) mouseUp 863511 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(20@14) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(452@413) corner: (468@429)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@413) mouseOver 863991 nil]
		targetOffset: 	(20.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@60) mouseUp 863511 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(452@413) corner: (468@429)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@413) mouseOver 863991 nil]
		targetOffset: 	(20.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@60) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(452@413) corner: (468@429)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@413) mouseOver 863991 nil]
		targetOffset: 	(20.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(25@60) mouseUp 863511 nil]
		evt: 	[(25@60) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(452@413) corner: (468@429)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@413) mouseOver 863991 nil]
		targetOffset: 	(20.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		evt: 	[(25@60) mouseUp 863511 nil]
	Receiver's instance variables: 
		bounds: 	(452@413) corner: (468@429)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@413) mouseOver 863991 nil]
		targetOffset: 	(20.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[:h |
		self activeHand: h.
		h processEvents.
		self activeHand: nil.
	] in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		h: 	a HandMorph(268082944)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	842441
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(760338944)) MorphicAla[..]
		lastAlarmTime: 	868642
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 5 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(268082944))
	Arguments and temporary variables: 
		aBlock: 	[:h |
		self activeHand: h.
		h processEvents.
		self activeHand: n[..]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(268082944))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h |
		self activeHand: h.
		h processEvents.
		self activeHand: n[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	842441
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(760338944)) MorphicAla[..]
		lastAlarmTime: 	868642
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	842441
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(760338944)) MorphicAla[..]
		lastAlarmTime: 	868642
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 5 items



--- The full stack ---
ZnClient(Object)>>error:
ZnClient>>contentType:
[
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] in [
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h |
		self activeHand: h.
		h processEvents.
		self activeHand: nil.
	] in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
There is no request entity yet, cannot set its content-type
26 September 2025 4:45:50.623448 pm

VM: Mac OS - arm64 - 1000 - CoInterpreter VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 796cf0ae-9df8-0d00-bd87-dbbf06d86bc4 Aug 13 2025
v10.3.8+0.a7c8a0bba - Commit: a7c8a0bba - Date: 2025-08-12 19:03:31 +0200

Image: Pharo13.1.0SNAPSHOT [Build information: Pharo-13.1.0+SNAPSHOT.build.699.sha.be5cc741badcf8f5202497545e7d75c65116d5d0 (64 Bit)]

ZnClient(Object)>>error:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		aString: 	'There is no request entity yet, cannot set its content-type'
	Receiver's instance variables: 
		request: 	a ZnRequest()
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	nil
		session: 	nil
		logLevel: 	3
		newOptions: 	a ZnOptions


ZnClient>>contentType:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		mimeType: 	application/json
	Receiver's instance variables: 
		request: 	a ZnRequest()
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	nil
		session: 	nil
		logLevel: 	3
		newOptions: 	a ZnOptions


[
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] in [
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
		client: 	a ZnClient
		resp: 	nil
		status: 	nil
		respBody: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
        client := ZnClient new.
        client
            url: serverUrl;
         [..]
	Arguments and temporary variables: 
		exception: 	ZnHttpUnsuccessful
		handlerAction: 	[ :ex | UIManager default alert: 'HTTP error: ', ex response[..]
	Receiver's instance variables: 
		outerContext: 	[
    [
        client := ZnClient new.
        client
      [..]
		compiledBlock: 	a CompiledBlock: [
        client := ZnClient new.
        c[..]
		numArgs: 	0
		receiver: 	nil


[
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
		client: 	a ZnClient
		resp: 	nil
		status: 	nil
		respBody: 	nil
	Receiver's instance variables: 
nil

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
    [
        client := ZnClient new.
        client
            url: serverUrl;
   [..]
	Arguments and temporary variables: 
		exception: 	NetworkError
		handlerAction: 	[ :ex | UIManager default alert: 'Network error: ', ex messa[..]
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		compiledBlock: 	a CompiledBlock: [
    [
        client := ZnClient new.
   [..]
		numArgs: 	0
		receiver: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		client: 	a ZnClient
		resp: 	nil
		status: 	nil
		respBody: 	nil
		sql: 	'select * from khan;'
		body: 	'select * from khan;'
		valid: 	true
		endsWithSemi: 	false
		rest: 	'* from khan;'
		lc: 	'select * from khan;'
		fromPos: 	9
		afterFrom: 	'khan;'
		jsonEscaped: 	'select * from khan;'
		payload: 	'{"sql":"select * from khan;"}'
		serverUrl: 	'http://localhost:8080/api/sql'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		doItMethod: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| sql "Part 1 — SELECT-only validator (build + send JSON payloa[..]
		source: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| sq[..]
		compilationContext: 	an OCCompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	[ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncem[..]
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2270) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
[..]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :e |
		self announcer announce: (SpCodeEvaluationFailedAnn[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
		self announcer announce: (SpCodeWillBeE[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		result: 	nil
		oldBindings: 	a Dictionary(#afterFrom->nil #allowedChars->nil #body->nil #c-[..]
		aString: 	'"Part 1 — SELECT-only validator (build + send JSON payload)"

| s[..]
		compileErrorBlock: 	[ ^ self ]
		errorBlock: 	[ :e | e pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		properties: 	a SmallDictionary()
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ a SpCommandGroup ]
		internalActionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ [ :transfer | self dropEnabled ] ]
		acceptDrop: 	an ObservableValueHolder[ [ :transfer | ] ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 2270) ]
		text: 	an ObservableValueHolder[ '"Part 1 — SELECT-only validator (build + s[..]
		actionToPerform: 	an ObservableValueHolder[ [ :txt |  ] ]
		readSelection: 	an ObservableValueHolder[ [ selection ] ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ nil ]
		scrollValue: 	an ObservableValueHolder[ (0@1.0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		properties: 	a SmallDictionary()
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Playground' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		userActionGroup: 	an ObservableValueHolder[ nil ]
		internalActionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	[ :selection |
		self changeSelection: selection from: new[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it all'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it all)
	Arguments and temporary variables: 
		aButtonClass: 	nil
		specCommand: 	a SpCommand(Do it all)
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#go
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :specCommand | 
		aButtonClass new
			label: specCom[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ specCommand execute ]
	Arguments and temporary variables: 
		anArg: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :specCommand | 
		aButtonClass new
			label: specCommand na[..]
		compiledBlock: 	a CompiledBlock: [ specCommand execute ]
		numArgs: 	0
		receiver: 	a SpCommand(Do it all)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(695084544))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(695084544)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		event: 	[(14@22) mouseUp 882781 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(14@22) mouseUp 882781 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
		m: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]
	Arguments and temporary variables: 
		aBlock: 	[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTru[..]
		index: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(620782080) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		evt: 	[(14@22) mouseUp 882781 nil]
		all: 	an Array(a SpToolbarButtonMorph(695084544) a SpToolbarButtonMorph(6207[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(14@22) mouseUp 882781 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(14@22) mouseUp 882781 nil]
	Arguments and temporary variables: 
		anObject: 	a SpToolbarButtonMorph(695084544)
	Receiver's instance variables: 
		timeStamp: 	882781
		source: 	a HandMorph(268082944)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(14@22)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(14@22) mouseUp 882781 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(695084544)
	Arguments and temporary variables: 
		anEvent: 	[(14@22) mouseUp 882781 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(1049703168)
		submorphs: 	an Array(an AlignmentMorph(1052700416))
		fullBounds: 	(0@5) corner: (45@39)
		color: 	Color transparent
		extension: 	a MorphExtension (895015680) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it all'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(984746496)'Do it all'
		iconMorph: 	an ImageMorph(402667008)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@68) mouseUp 882781 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(14@22) mouseUp 882781 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(927@506) corner: (943@522)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@506) mouseOver 895361 nil]
		targetOffset: 	(23.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex |
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent:[..]
		numArgs: 	0
		receiver: 	a HandMorph(268082944)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(19@68) mouseUp 882781 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(883747328) [world]
		transformedEvent: 	[(14@22) mouseUp 882781 nil]
	Receiver's instance variables: 
		bounds: 	(927@506) corner: (943@522)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@506) mouseOver 895361 nil]
		targetOffset: 	(23.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@68) mouseUp 882781 nil]
		focusHolder: 	a SpToolbarButtonMorph(695084544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(927@506) corner: (943@522)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@506) mouseOver 895361 nil]
		targetOffset: 	(23.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@68) mouseUp 882781 nil]
	Receiver's instance variables: 
		bounds: 	(927@506) corner: (943@522)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@506) mouseOver 895361 nil]
		targetOffset: 	(23.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(268082944)
	Arguments and temporary variables: 
		anEvent: 	[(19@68) mouseUp 882781 nil]
		evt: 	[(19@68) mouseUp 882781 nil]
	Receiver's instance variables: 
		bounds: 	(927@506) corner: (943@522)
		owner: 	a WorldMorph(883747328) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (421793536)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(866060032)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@506) mouseOver 895361 nil]
		targetOffset: 	(23.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
[..]
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(19@68) mouseUp 882781 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(883747328) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNo[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	842441
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(723400448)) MorphicAla[..]
		lastAlarmTime: 	895394
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(883747328) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(268082944))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	842441
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(723400448)) MorphicAla[..]
		lastAlarmTime: 	895394
		activeHand: 	a HandMorph(268082944)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1470@919)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(883747328) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1470@919)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(298801664) a TaskbarMorph(348776192) a S[..]
		fullBounds: 	nil
		color: 	(Color r: 0.14858260019550343 g: 0.19648093841642228 b: 0.2199413489[..]
		extension: 	a MorphExtension (328068608) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		zoomFactor: 	1



--- The full stack ---
ZnClient(Object)>>error:
ZnClient>>contentType:
[
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] in [
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
[
    [
        client := ZnClient new.
        client
            url: serverUrl;
            timeout: 15;
            contentType: ZnMimeType applicationJson;
            accept: ZnMimeType applicationJson;
            contents: payload;
            post.
        
        resp := client response.
        status := resp code.
        respBody := resp hasEntity 
            ifTrue: [ resp contents ] 
            ifFalse: [ '' ].
    ] on: ZnHttpUnsuccessful 
    do: [ :ex | UIManager default alert: 'HTTP error: ', ex response code asString ]
] in UndefinedObject>>DoIt
FullBlockClosure(BlockClosure)>>on:do:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
		self announcer announce: (SpCodeWillBeEvaluatedAnnouncement newContent: aString).
		oldBindings := self interactionModel bindings copy.
		result := self interactionModel compiler
			source: aString;
			environment: self environment;
			failBlock:  [ 
				self announcer announce: (SpCodeEvaluationFailedAnnouncement newContent: aString).
				^ compileErrorBlock value ];
			evaluate.
		oldBindings size = self interactionModel bindings size 
			ifFalse: [ self refreshStyling ].
		self announcer announce: (SpCodeEvaluationSucceedAnnouncement newContent: aString).
		result ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ specCommand execute ] in [ :specCommand | 
		aButtonClass new
			label: specCommand name;
			help: specCommand description;
			in: [ :button | 
				specCommand hasIcon
					ifTrue: [ button icon: specCommand icon ] ];
			action: [ specCommand execute ];
			enabled: specCommand canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[:m |
		(m containsPoint: evt cursorPoint) ifTrue: [m enabled ifTrue: [ m performAction: evt ]]] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph>>doOneCycle
[
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

